{
  "0xfce589350d2ecd1b6ff9bc9afd97962a5705218ceeb6df59309b4019feeecda2": {
    "name": "StakeTokenERC20",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "StakeTokenERC20",
      "sourceName": "contracts/StakeTokenERC20.sol",
      "abi": [
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "allowance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "needed",
              "type": "uint256"
            }
          ],
          "name": "ERC20InsufficientAllowance",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "needed",
              "type": "uint256"
            }
          ],
          "name": "ERC20InsufficientBalance",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "approver",
              "type": "address"
            }
          ],
          "name": "ERC20InvalidApprover",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            }
          ],
          "name": "ERC20InvalidReceiver",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ],
          "name": "ERC20InvalidSender",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "name": "ERC20InvalidSpender",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "decimals",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "transfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "transferFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280600e81526020016d26b2ba30a9ba30b5b2aa37b5b2b760911b815250604051806040016040528060038152602001621354d560ea1b8152508160039081620000669190620002b7565b506004620000758282620002b7565b50505062000095336a084595161401484a0000006200009b60201b60201c565b620003ab565b6001600160a01b038216620000cb5760405163ec442f0560e01b8152600060048201526024015b60405180910390fd5b620000d960008383620000dd565b5050565b6001600160a01b0383166200010c57806002600082825462000100919062000383565b90915550620001809050565b6001600160a01b03831660009081526020819052604090205481811015620001615760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401620000c2565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166200019e57600280548290039055620001bd565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200020391815260200190565b60405180910390a3505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200023b57607f821691505b6020821081036200025c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002b2576000816000526020600020601f850160051c810160208610156200028d5750805b601f850160051c820191505b81811015620002ae5782815560010162000299565b5050505b505050565b81516001600160401b03811115620002d357620002d362000210565b620002eb81620002e4845462000226565b8462000262565b602080601f8311600181146200032357600084156200030a5750858301515b600019600386901b1c1916600185901b178555620002ae565b600085815260208120601f198616915b82811015620003545788860151825594840194600190910190840162000333565b5085821015620003735787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80820180821115620003a557634e487b7160e01b600052601160045260246000fd5b92915050565b61072280620003bb6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce567146100fe57806370a082311461010d57806395d89b4114610136578063a9059cbb1461013e578063dd62ed3e1461015157600080fd5b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100d957806323b872dd146100eb575b600080fd5b6100a061018a565b6040516100ad919061056b565b60405180910390f35b6100c96100c43660046105d6565b61021c565b60405190151581526020016100ad565b6002545b6040519081526020016100ad565b6100c96100f9366004610600565b610236565b604051601281526020016100ad565b6100dd61011b36600461063c565b6001600160a01b031660009081526020819052604090205490565b6100a061025a565b6100c961014c3660046105d6565b610269565b6100dd61015f36600461065e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461019990610691565b80601f01602080910402602001604051908101604052809291908181526020018280546101c590610691565b80156102125780601f106101e757610100808354040283529160200191610212565b820191906000526020600020905b8154815290600101906020018083116101f557829003601f168201915b5050505050905090565b60003361022a818585610277565b60019150505b92915050565b600033610244858285610289565b61024f85858561030d565b506001949350505050565b60606004805461019990610691565b60003361022a81858561030d565b610284838383600161036c565b505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981101561030757818110156102f857604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064015b60405180910390fd5b6103078484848403600061036c565b50505050565b6001600160a01b03831661033757604051634b637e8f60e11b8152600060048201526024016102ef565b6001600160a01b0382166103615760405163ec442f0560e01b8152600060048201526024016102ef565b610284838383610441565b6001600160a01b0384166103965760405163e602df0560e01b8152600060048201526024016102ef565b6001600160a01b0383166103c057604051634a1406b160e11b8152600060048201526024016102ef565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561030757826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161043391815260200190565b60405180910390a350505050565b6001600160a01b03831661046c57806002600082825461046191906106cb565b909155506104de9050565b6001600160a01b038316600090815260208190526040902054818110156104bf5760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016102ef565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166104fa57600280548290039055610519565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161055e91815260200190565b60405180910390a3505050565b60006020808352835180602085015260005b818110156105995785810183015185820160400152820161057d565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146105d157600080fd5b919050565b600080604083850312156105e957600080fd5b6105f2836105ba565b946020939093013593505050565b60008060006060848603121561061557600080fd5b61061e846105ba565b925061062c602085016105ba565b9150604084013590509250925092565b60006020828403121561064e57600080fd5b610657826105ba565b9392505050565b6000806040838503121561067157600080fd5b61067a836105ba565b9150610688602084016105ba565b90509250929050565b600181811c908216806106a557607f821691505b6020821081036106c557634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561023057634e487b7160e01b600052601160045260246000fdfea2646970667358221220abaea69e6459a3891e181d751a5abda5c74857fbc793013aa45564dfbda9b89064736f6c63430008160033",
      "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce567146100fe57806370a082311461010d57806395d89b4114610136578063a9059cbb1461013e578063dd62ed3e1461015157600080fd5b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100d957806323b872dd146100eb575b600080fd5b6100a061018a565b6040516100ad919061056b565b60405180910390f35b6100c96100c43660046105d6565b61021c565b60405190151581526020016100ad565b6002545b6040519081526020016100ad565b6100c96100f9366004610600565b610236565b604051601281526020016100ad565b6100dd61011b36600461063c565b6001600160a01b031660009081526020819052604090205490565b6100a061025a565b6100c961014c3660046105d6565b610269565b6100dd61015f36600461065e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461019990610691565b80601f01602080910402602001604051908101604052809291908181526020018280546101c590610691565b80156102125780601f106101e757610100808354040283529160200191610212565b820191906000526020600020905b8154815290600101906020018083116101f557829003601f168201915b5050505050905090565b60003361022a818585610277565b60019150505b92915050565b600033610244858285610289565b61024f85858561030d565b506001949350505050565b60606004805461019990610691565b60003361022a81858561030d565b610284838383600161036c565b505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981101561030757818110156102f857604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064015b60405180910390fd5b6103078484848403600061036c565b50505050565b6001600160a01b03831661033757604051634b637e8f60e11b8152600060048201526024016102ef565b6001600160a01b0382166103615760405163ec442f0560e01b8152600060048201526024016102ef565b610284838383610441565b6001600160a01b0384166103965760405163e602df0560e01b8152600060048201526024016102ef565b6001600160a01b0383166103c057604051634a1406b160e11b8152600060048201526024016102ef565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561030757826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161043391815260200190565b60405180910390a350505050565b6001600160a01b03831661046c57806002600082825461046191906106cb565b909155506104de9050565b6001600160a01b038316600090815260208190526040902054818110156104bf5760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016102ef565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166104fa57600280548290039055610519565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161055e91815260200190565b60405180910390a3505050565b60006020808352835180602085015260005b818110156105995785810183015185820160400152820161057d565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146105d157600080fd5b919050565b600080604083850312156105e957600080fd5b6105f2836105ba565b946020939093013593505050565b60008060006060848603121561061557600080fd5b61061e846105ba565b925061062c602085016105ba565b9150604084013590509250925092565b60006020828403121561064e57600080fd5b610657826105ba565b9392505050565b6000806040838503121561067157600080fd5b61067a836105ba565b9150610688602084016105ba565b90509250929050565b600181811c908216806106a557607f821691505b6020821081036106c557634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561023057634e487b7160e01b600052601160045260246000fdfea2646970667358221220abaea69e6459a3891e181d751a5abda5c74857fbc793013aa45564dfbda9b89064736f6c63430008160033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "errors": {
          "ERC20InsufficientAllowance(address,uint256,uint256)": [
            {
              "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
              "params": {
                "allowance": "Amount of tokens a `spender` is allowed to operate with.",
                "needed": "Minimum amount required to perform a transfer.",
                "spender": "Address that may be allowed to operate on tokens without being their owner."
              }
            }
          ],
          "ERC20InsufficientBalance(address,uint256,uint256)": [
            {
              "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
              "params": {
                "balance": "Current balance for the interacting account.",
                "needed": "Minimum amount required to perform a transfer.",
                "sender": "Address whose tokens are being transferred."
              }
            }
          ],
          "ERC20InvalidApprover(address)": [
            {
              "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
              "params": {
                "approver": "Address initiating an approval operation."
              }
            }
          ],
          "ERC20InvalidReceiver(address)": [
            {
              "details": "Indicates a failure with the token `receiver`. Used in transfers.",
              "params": {
                "receiver": "Address to which tokens are being transferred."
              }
            }
          ],
          "ERC20InvalidSender(address)": [
            {
              "details": "Indicates a failure with the token `sender`. Used in transfers.",
              "params": {
                "sender": "Address whose tokens are being transferred."
              }
            }
          ],
          "ERC20InvalidSpender(address)": [
            {
              "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
              "params": {
                "spender": "Address that may be allowed to operate on tokens without being their owner."
              }
            }
          ]
        },
        "events": {
          "Approval(address,address,uint256)": {
            "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
          },
          "Transfer(address,address,uint256)": {
            "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
          }
        },
        "kind": "dev",
        "methods": {
          "allowance(address,address)": {
            "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
          },
          "approve(address,uint256)": {
            "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
          },
          "balanceOf(address)": {
            "details": "Returns the value of tokens owned by `account`."
          },
          "decimals()": {
            "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
          },
          "name()": {
            "details": "Returns the name of the token."
          },
          "symbol()": {
            "details": "Returns the symbol of the token, usually a shorter version of the name."
          },
          "totalSupply()": {
            "details": "Returns the value of tokens in existence."
          },
          "transfer(address,uint256)": {
            "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_1757": {
              "entryPoint": null,
              "id": 1757,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_8575": {
              "entryPoint": null,
              "id": 8575,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_mint_2060": {
              "entryPoint": 155,
              "id": 2060,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_update_2027": {
              "entryPoint": 221,
              "id": 2027,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "array_dataslot_string_storage": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "checked_add_t_uint256": {
              "entryPoint": 899,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "clean_up_bytearray_end_slots_string_storage": {
              "entryPoint": 610,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
              "entryPoint": 695,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "extract_byte_array_length": {
              "entryPoint": 550,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "extract_used_part_and_set_length_of_short_byte_array": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "panic_error_0x41": {
              "entryPoint": 528,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nativeSrc": "0:3690:29",
                "nodeType": "YulBlock",
                "src": "0:3690:29",
                "statements": [
                  {
                    "nativeSrc": "6:3:29",
                    "nodeType": "YulBlock",
                    "src": "6:3:29",
                    "statements": []
                  },
                  {
                    "body": {
                      "nativeSrc": "46:95:29",
                      "nodeType": "YulBlock",
                      "src": "46:95:29",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "63:1:29",
                                "nodeType": "YulLiteral",
                                "src": "63:1:29",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "70:3:29",
                                    "nodeType": "YulLiteral",
                                    "src": "70:3:29",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "75:10:29",
                                    "nodeType": "YulLiteral",
                                    "src": "75:10:29",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nativeSrc": "66:3:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "66:3:29"
                                },
                                "nativeSrc": "66:20:29",
                                "nodeType": "YulFunctionCall",
                                "src": "66:20:29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "56:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "56:6:29"
                            },
                            "nativeSrc": "56:31:29",
                            "nodeType": "YulFunctionCall",
                            "src": "56:31:29"
                          },
                          "nativeSrc": "56:31:29",
                          "nodeType": "YulExpressionStatement",
                          "src": "56:31:29"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "103:1:29",
                                "nodeType": "YulLiteral",
                                "src": "103:1:29",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "106:4:29",
                                "nodeType": "YulLiteral",
                                "src": "106:4:29",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "96:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "96:6:29"
                            },
                            "nativeSrc": "96:15:29",
                            "nodeType": "YulFunctionCall",
                            "src": "96:15:29"
                          },
                          "nativeSrc": "96:15:29",
                          "nodeType": "YulExpressionStatement",
                          "src": "96:15:29"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "127:1:29",
                                "nodeType": "YulLiteral",
                                "src": "127:1:29",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "130:4:29",
                                "nodeType": "YulLiteral",
                                "src": "130:4:29",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "120:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "120:6:29"
                            },
                            "nativeSrc": "120:15:29",
                            "nodeType": "YulFunctionCall",
                            "src": "120:15:29"
                          },
                          "nativeSrc": "120:15:29",
                          "nodeType": "YulExpressionStatement",
                          "src": "120:15:29"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nativeSrc": "14:127:29",
                    "nodeType": "YulFunctionDefinition",
                    "src": "14:127:29"
                  },
                  {
                    "body": {
                      "nativeSrc": "201:325:29",
                      "nodeType": "YulBlock",
                      "src": "201:325:29",
                      "statements": [
                        {
                          "nativeSrc": "211:22:29",
                          "nodeType": "YulAssignment",
                          "src": "211:22:29",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "225:1:29",
                                "nodeType": "YulLiteral",
                                "src": "225:1:29",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nativeSrc": "228:4:29",
                                "nodeType": "YulIdentifier",
                                "src": "228:4:29"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nativeSrc": "221:3:29",
                              "nodeType": "YulIdentifier",
                              "src": "221:3:29"
                            },
                            "nativeSrc": "221:12:29",
                            "nodeType": "YulFunctionCall",
                            "src": "221:12:29"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nativeSrc": "211:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "211:6:29"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "242:38:29",
                          "nodeType": "YulVariableDeclaration",
                          "src": "242:38:29",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nativeSrc": "272:4:29",
                                "nodeType": "YulIdentifier",
                                "src": "272:4:29"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "278:1:29",
                                "nodeType": "YulLiteral",
                                "src": "278:1:29",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "268:3:29",
                              "nodeType": "YulIdentifier",
                              "src": "268:3:29"
                            },
                            "nativeSrc": "268:12:29",
                            "nodeType": "YulFunctionCall",
                            "src": "268:12:29"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nativeSrc": "246:18:29",
                              "nodeType": "YulTypedName",
                              "src": "246:18:29",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "319:31:29",
                            "nodeType": "YulBlock",
                            "src": "319:31:29",
                            "statements": [
                              {
                                "nativeSrc": "321:27:29",
                                "nodeType": "YulAssignment",
                                "src": "321:27:29",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nativeSrc": "335:6:29",
                                      "nodeType": "YulIdentifier",
                                      "src": "335:6:29"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "343:4:29",
                                      "nodeType": "YulLiteral",
                                      "src": "343:4:29",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nativeSrc": "331:3:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "331:3:29"
                                  },
                                  "nativeSrc": "331:17:29",
                                  "nodeType": "YulFunctionCall",
                                  "src": "331:17:29"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "321:6:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "321:6:29"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nativeSrc": "299:18:29",
                                "nodeType": "YulIdentifier",
                                "src": "299:18:29"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "292:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "292:6:29"
                            },
                            "nativeSrc": "292:26:29",
                            "nodeType": "YulFunctionCall",
                            "src": "292:26:29"
                          },
                          "nativeSrc": "289:61:29",
                          "nodeType": "YulIf",
                          "src": "289:61:29"
                        },
                        {
                          "body": {
                            "nativeSrc": "409:111:29",
                            "nodeType": "YulBlock",
                            "src": "409:111:29",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "430:1:29",
                                      "nodeType": "YulLiteral",
                                      "src": "430:1:29",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "437:3:29",
                                          "nodeType": "YulLiteral",
                                          "src": "437:3:29",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "442:10:29",
                                          "nodeType": "YulLiteral",
                                          "src": "442:10:29",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nativeSrc": "433:3:29",
                                        "nodeType": "YulIdentifier",
                                        "src": "433:3:29"
                                      },
                                      "nativeSrc": "433:20:29",
                                      "nodeType": "YulFunctionCall",
                                      "src": "433:20:29"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "423:6:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "423:6:29"
                                  },
                                  "nativeSrc": "423:31:29",
                                  "nodeType": "YulFunctionCall",
                                  "src": "423:31:29"
                                },
                                "nativeSrc": "423:31:29",
                                "nodeType": "YulExpressionStatement",
                                "src": "423:31:29"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "474:1:29",
                                      "nodeType": "YulLiteral",
                                      "src": "474:1:29",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "477:4:29",
                                      "nodeType": "YulLiteral",
                                      "src": "477:4:29",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "467:6:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "467:6:29"
                                  },
                                  "nativeSrc": "467:15:29",
                                  "nodeType": "YulFunctionCall",
                                  "src": "467:15:29"
                                },
                                "nativeSrc": "467:15:29",
                                "nodeType": "YulExpressionStatement",
                                "src": "467:15:29"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "502:1:29",
                                      "nodeType": "YulLiteral",
                                      "src": "502:1:29",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "505:4:29",
                                      "nodeType": "YulLiteral",
                                      "src": "505:4:29",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "495:6:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "495:6:29"
                                  },
                                  "nativeSrc": "495:15:29",
                                  "nodeType": "YulFunctionCall",
                                  "src": "495:15:29"
                                },
                                "nativeSrc": "495:15:29",
                                "nodeType": "YulExpressionStatement",
                                "src": "495:15:29"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nativeSrc": "365:18:29",
                                "nodeType": "YulIdentifier",
                                "src": "365:18:29"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "388:6:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "388:6:29"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "396:2:29",
                                    "nodeType": "YulLiteral",
                                    "src": "396:2:29",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nativeSrc": "385:2:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "385:2:29"
                                },
                                "nativeSrc": "385:14:29",
                                "nodeType": "YulFunctionCall",
                                "src": "385:14:29"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nativeSrc": "362:2:29",
                              "nodeType": "YulIdentifier",
                              "src": "362:2:29"
                            },
                            "nativeSrc": "362:38:29",
                            "nodeType": "YulFunctionCall",
                            "src": "362:38:29"
                          },
                          "nativeSrc": "359:161:29",
                          "nodeType": "YulIf",
                          "src": "359:161:29"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nativeSrc": "146:380:29",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nativeSrc": "181:4:29",
                        "nodeType": "YulTypedName",
                        "src": "181:4:29",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nativeSrc": "190:6:29",
                        "nodeType": "YulTypedName",
                        "src": "190:6:29",
                        "type": ""
                      }
                    ],
                    "src": "146:380:29"
                  },
                  {
                    "body": {
                      "nativeSrc": "587:65:29",
                      "nodeType": "YulBlock",
                      "src": "587:65:29",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "604:1:29",
                                "nodeType": "YulLiteral",
                                "src": "604:1:29",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "name": "ptr",
                                "nativeSrc": "607:3:29",
                                "nodeType": "YulIdentifier",
                                "src": "607:3:29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "597:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "597:6:29"
                            },
                            "nativeSrc": "597:14:29",
                            "nodeType": "YulFunctionCall",
                            "src": "597:14:29"
                          },
                          "nativeSrc": "597:14:29",
                          "nodeType": "YulExpressionStatement",
                          "src": "597:14:29"
                        },
                        {
                          "nativeSrc": "620:26:29",
                          "nodeType": "YulAssignment",
                          "src": "620:26:29",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "638:1:29",
                                "nodeType": "YulLiteral",
                                "src": "638:1:29",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "641:4:29",
                                "nodeType": "YulLiteral",
                                "src": "641:4:29",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "keccak256",
                              "nativeSrc": "628:9:29",
                              "nodeType": "YulIdentifier",
                              "src": "628:9:29"
                            },
                            "nativeSrc": "628:18:29",
                            "nodeType": "YulFunctionCall",
                            "src": "628:18:29"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nativeSrc": "620:4:29",
                              "nodeType": "YulIdentifier",
                              "src": "620:4:29"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_dataslot_string_storage",
                    "nativeSrc": "531:121:29",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nativeSrc": "570:3:29",
                        "nodeType": "YulTypedName",
                        "src": "570:3:29",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "data",
                        "nativeSrc": "578:4:29",
                        "nodeType": "YulTypedName",
                        "src": "578:4:29",
                        "type": ""
                      }
                    ],
                    "src": "531:121:29"
                  },
                  {
                    "body": {
                      "nativeSrc": "738:462:29",
                      "nodeType": "YulBlock",
                      "src": "738:462:29",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "771:423:29",
                            "nodeType": "YulBlock",
                            "src": "771:423:29",
                            "statements": [
                              {
                                "nativeSrc": "785:11:29",
                                "nodeType": "YulVariableDeclaration",
                                "src": "785:11:29",
                                "value": {
                                  "kind": "number",
                                  "nativeSrc": "795:1:29",
                                  "nodeType": "YulLiteral",
                                  "src": "795:1:29",
                                  "type": "",
                                  "value": "0"
                                },
                                "variables": [
                                  {
                                    "name": "_1",
                                    "nativeSrc": "789:2:29",
                                    "nodeType": "YulTypedName",
                                    "src": "789:2:29",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "816:1:29",
                                      "nodeType": "YulLiteral",
                                      "src": "816:1:29",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "name": "array",
                                      "nativeSrc": "819:5:29",
                                      "nodeType": "YulIdentifier",
                                      "src": "819:5:29"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "809:6:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "809:6:29"
                                  },
                                  "nativeSrc": "809:16:29",
                                  "nodeType": "YulFunctionCall",
                                  "src": "809:16:29"
                                },
                                "nativeSrc": "809:16:29",
                                "nodeType": "YulExpressionStatement",
                                "src": "809:16:29"
                              },
                              {
                                "nativeSrc": "838:30:29",
                                "nodeType": "YulVariableDeclaration",
                                "src": "838:30:29",
                                "value": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "860:1:29",
                                      "nodeType": "YulLiteral",
                                      "src": "860:1:29",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "863:4:29",
                                      "nodeType": "YulLiteral",
                                      "src": "863:4:29",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "keccak256",
                                    "nativeSrc": "850:9:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "850:9:29"
                                  },
                                  "nativeSrc": "850:18:29",
                                  "nodeType": "YulFunctionCall",
                                  "src": "850:18:29"
                                },
                                "variables": [
                                  {
                                    "name": "data",
                                    "nativeSrc": "842:4:29",
                                    "nodeType": "YulTypedName",
                                    "src": "842:4:29",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nativeSrc": "881:57:29",
                                "nodeType": "YulVariableDeclaration",
                                "src": "881:57:29",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "data",
                                      "nativeSrc": "904:4:29",
                                      "nodeType": "YulIdentifier",
                                      "src": "904:4:29"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "914:1:29",
                                          "nodeType": "YulLiteral",
                                          "src": "914:1:29",
                                          "type": "",
                                          "value": "5"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "startIndex",
                                              "nativeSrc": "921:10:29",
                                              "nodeType": "YulIdentifier",
                                              "src": "921:10:29"
                                            },
                                            {
                                              "kind": "number",
                                              "nativeSrc": "933:2:29",
                                              "nodeType": "YulLiteral",
                                              "src": "933:2:29",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "917:3:29",
                                            "nodeType": "YulIdentifier",
                                            "src": "917:3:29"
                                          },
                                          "nativeSrc": "917:19:29",
                                          "nodeType": "YulFunctionCall",
                                          "src": "917:19:29"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shr",
                                        "nativeSrc": "910:3:29",
                                        "nodeType": "YulIdentifier",
                                        "src": "910:3:29"
                                      },
                                      "nativeSrc": "910:27:29",
                                      "nodeType": "YulFunctionCall",
                                      "src": "910:27:29"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "900:3:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "900:3:29"
                                  },
                                  "nativeSrc": "900:38:29",
                                  "nodeType": "YulFunctionCall",
                                  "src": "900:38:29"
                                },
                                "variables": [
                                  {
                                    "name": "deleteStart",
                                    "nativeSrc": "885:11:29",
                                    "nodeType": "YulTypedName",
                                    "src": "885:11:29",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nativeSrc": "975:23:29",
                                  "nodeType": "YulBlock",
                                  "src": "975:23:29",
                                  "statements": [
                                    {
                                      "nativeSrc": "977:19:29",
                                      "nodeType": "YulAssignment",
                                      "src": "977:19:29",
                                      "value": {
                                        "name": "data",
                                        "nativeSrc": "992:4:29",
                                        "nodeType": "YulIdentifier",
                                        "src": "992:4:29"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "deleteStart",
                                          "nativeSrc": "977:11:29",
                                          "nodeType": "YulIdentifier",
                                          "src": "977:11:29"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "startIndex",
                                      "nativeSrc": "957:10:29",
                                      "nodeType": "YulIdentifier",
                                      "src": "957:10:29"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "969:4:29",
                                      "nodeType": "YulLiteral",
                                      "src": "969:4:29",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nativeSrc": "954:2:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "954:2:29"
                                  },
                                  "nativeSrc": "954:20:29",
                                  "nodeType": "YulFunctionCall",
                                  "src": "954:20:29"
                                },
                                "nativeSrc": "951:47:29",
                                "nodeType": "YulIf",
                                "src": "951:47:29"
                              },
                              {
                                "nativeSrc": "1011:41:29",
                                "nodeType": "YulVariableDeclaration",
                                "src": "1011:41:29",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "data",
                                      "nativeSrc": "1025:4:29",
                                      "nodeType": "YulIdentifier",
                                      "src": "1025:4:29"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "1035:1:29",
                                          "nodeType": "YulLiteral",
                                          "src": "1035:1:29",
                                          "type": "",
                                          "value": "5"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "len",
                                              "nativeSrc": "1042:3:29",
                                              "nodeType": "YulIdentifier",
                                              "src": "1042:3:29"
                                            },
                                            {
                                              "kind": "number",
                                              "nativeSrc": "1047:2:29",
                                              "nodeType": "YulLiteral",
                                              "src": "1047:2:29",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "1038:3:29",
                                            "nodeType": "YulIdentifier",
                                            "src": "1038:3:29"
                                          },
                                          "nativeSrc": "1038:12:29",
                                          "nodeType": "YulFunctionCall",
                                          "src": "1038:12:29"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shr",
                                        "nativeSrc": "1031:3:29",
                                        "nodeType": "YulIdentifier",
                                        "src": "1031:3:29"
                                      },
                                      "nativeSrc": "1031:20:29",
                                      "nodeType": "YulFunctionCall",
                                      "src": "1031:20:29"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "1021:3:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "1021:3:29"
                                  },
                                  "nativeSrc": "1021:31:29",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1021:31:29"
                                },
                                "variables": [
                                  {
                                    "name": "_2",
                                    "nativeSrc": "1015:2:29",
                                    "nodeType": "YulTypedName",
                                    "src": "1015:2:29",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nativeSrc": "1065:24:29",
                                "nodeType": "YulVariableDeclaration",
                                "src": "1065:24:29",
                                "value": {
                                  "name": "deleteStart",
                                  "nativeSrc": "1078:11:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "1078:11:29"
                                },
                                "variables": [
                                  {
                                    "name": "start",
                                    "nativeSrc": "1069:5:29",
                                    "nodeType": "YulTypedName",
                                    "src": "1069:5:29",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nativeSrc": "1163:21:29",
                                  "nodeType": "YulBlock",
                                  "src": "1163:21:29",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "start",
                                            "nativeSrc": "1172:5:29",
                                            "nodeType": "YulIdentifier",
                                            "src": "1172:5:29"
                                          },
                                          {
                                            "name": "_1",
                                            "nativeSrc": "1179:2:29",
                                            "nodeType": "YulIdentifier",
                                            "src": "1179:2:29"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sstore",
                                          "nativeSrc": "1165:6:29",
                                          "nodeType": "YulIdentifier",
                                          "src": "1165:6:29"
                                        },
                                        "nativeSrc": "1165:17:29",
                                        "nodeType": "YulFunctionCall",
                                        "src": "1165:17:29"
                                      },
                                      "nativeSrc": "1165:17:29",
                                      "nodeType": "YulExpressionStatement",
                                      "src": "1165:17:29"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "start",
                                      "nativeSrc": "1113:5:29",
                                      "nodeType": "YulIdentifier",
                                      "src": "1113:5:29"
                                    },
                                    {
                                      "name": "_2",
                                      "nativeSrc": "1120:2:29",
                                      "nodeType": "YulIdentifier",
                                      "src": "1120:2:29"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nativeSrc": "1110:2:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "1110:2:29"
                                  },
                                  "nativeSrc": "1110:13:29",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1110:13:29"
                                },
                                "nativeSrc": "1102:82:29",
                                "nodeType": "YulForLoop",
                                "post": {
                                  "nativeSrc": "1124:26:29",
                                  "nodeType": "YulBlock",
                                  "src": "1124:26:29",
                                  "statements": [
                                    {
                                      "nativeSrc": "1126:22:29",
                                      "nodeType": "YulAssignment",
                                      "src": "1126:22:29",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "start",
                                            "nativeSrc": "1139:5:29",
                                            "nodeType": "YulIdentifier",
                                            "src": "1139:5:29"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "1146:1:29",
                                            "nodeType": "YulLiteral",
                                            "src": "1146:1:29",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "1135:3:29",
                                          "nodeType": "YulIdentifier",
                                          "src": "1135:3:29"
                                        },
                                        "nativeSrc": "1135:13:29",
                                        "nodeType": "YulFunctionCall",
                                        "src": "1135:13:29"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "start",
                                          "nativeSrc": "1126:5:29",
                                          "nodeType": "YulIdentifier",
                                          "src": "1126:5:29"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "pre": {
                                  "nativeSrc": "1106:3:29",
                                  "nodeType": "YulBlock",
                                  "src": "1106:3:29",
                                  "statements": []
                                },
                                "src": "1102:82:29"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "len",
                                "nativeSrc": "754:3:29",
                                "nodeType": "YulIdentifier",
                                "src": "754:3:29"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "759:2:29",
                                "nodeType": "YulLiteral",
                                "src": "759:2:29",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "751:2:29",
                              "nodeType": "YulIdentifier",
                              "src": "751:2:29"
                            },
                            "nativeSrc": "751:11:29",
                            "nodeType": "YulFunctionCall",
                            "src": "751:11:29"
                          },
                          "nativeSrc": "748:446:29",
                          "nodeType": "YulIf",
                          "src": "748:446:29"
                        }
                      ]
                    },
                    "name": "clean_up_bytearray_end_slots_string_storage",
                    "nativeSrc": "657:543:29",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "array",
                        "nativeSrc": "710:5:29",
                        "nodeType": "YulTypedName",
                        "src": "710:5:29",
                        "type": ""
                      },
                      {
                        "name": "len",
                        "nativeSrc": "717:3:29",
                        "nodeType": "YulTypedName",
                        "src": "717:3:29",
                        "type": ""
                      },
                      {
                        "name": "startIndex",
                        "nativeSrc": "722:10:29",
                        "nodeType": "YulTypedName",
                        "src": "722:10:29",
                        "type": ""
                      }
                    ],
                    "src": "657:543:29"
                  },
                  {
                    "body": {
                      "nativeSrc": "1290:81:29",
                      "nodeType": "YulBlock",
                      "src": "1290:81:29",
                      "statements": [
                        {
                          "nativeSrc": "1300:65:29",
                          "nodeType": "YulAssignment",
                          "src": "1300:65:29",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "data",
                                    "nativeSrc": "1315:4:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "1315:4:29"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nativeSrc": "1333:1:29",
                                                "nodeType": "YulLiteral",
                                                "src": "1333:1:29",
                                                "type": "",
                                                "value": "3"
                                              },
                                              {
                                                "name": "len",
                                                "nativeSrc": "1336:3:29",
                                                "nodeType": "YulIdentifier",
                                                "src": "1336:3:29"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nativeSrc": "1329:3:29",
                                              "nodeType": "YulIdentifier",
                                              "src": "1329:3:29"
                                            },
                                            "nativeSrc": "1329:11:29",
                                            "nodeType": "YulFunctionCall",
                                            "src": "1329:11:29"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nativeSrc": "1346:1:29",
                                                "nodeType": "YulLiteral",
                                                "src": "1346:1:29",
                                                "type": "",
                                                "value": "0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "not",
                                              "nativeSrc": "1342:3:29",
                                              "nodeType": "YulIdentifier",
                                              "src": "1342:3:29"
                                            },
                                            "nativeSrc": "1342:6:29",
                                            "nodeType": "YulFunctionCall",
                                            "src": "1342:6:29"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shr",
                                          "nativeSrc": "1325:3:29",
                                          "nodeType": "YulIdentifier",
                                          "src": "1325:3:29"
                                        },
                                        "nativeSrc": "1325:24:29",
                                        "nodeType": "YulFunctionCall",
                                        "src": "1325:24:29"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nativeSrc": "1321:3:29",
                                      "nodeType": "YulIdentifier",
                                      "src": "1321:3:29"
                                    },
                                    "nativeSrc": "1321:29:29",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1321:29:29"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "1311:3:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "1311:3:29"
                                },
                                "nativeSrc": "1311:40:29",
                                "nodeType": "YulFunctionCall",
                                "src": "1311:40:29"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1357:1:29",
                                    "nodeType": "YulLiteral",
                                    "src": "1357:1:29",
                                    "type": "",
                                    "value": "1"
                                  },
                                  {
                                    "name": "len",
                                    "nativeSrc": "1360:3:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "1360:3:29"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nativeSrc": "1353:3:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "1353:3:29"
                                },
                                "nativeSrc": "1353:11:29",
                                "nodeType": "YulFunctionCall",
                                "src": "1353:11:29"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nativeSrc": "1308:2:29",
                              "nodeType": "YulIdentifier",
                              "src": "1308:2:29"
                            },
                            "nativeSrc": "1308:57:29",
                            "nodeType": "YulFunctionCall",
                            "src": "1308:57:29"
                          },
                          "variableNames": [
                            {
                              "name": "used",
                              "nativeSrc": "1300:4:29",
                              "nodeType": "YulIdentifier",
                              "src": "1300:4:29"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "extract_used_part_and_set_length_of_short_byte_array",
                    "nativeSrc": "1205:166:29",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nativeSrc": "1267:4:29",
                        "nodeType": "YulTypedName",
                        "src": "1267:4:29",
                        "type": ""
                      },
                      {
                        "name": "len",
                        "nativeSrc": "1273:3:29",
                        "nodeType": "YulTypedName",
                        "src": "1273:3:29",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "used",
                        "nativeSrc": "1281:4:29",
                        "nodeType": "YulTypedName",
                        "src": "1281:4:29",
                        "type": ""
                      }
                    ],
                    "src": "1205:166:29"
                  },
                  {
                    "body": {
                      "nativeSrc": "1472:1249:29",
                      "nodeType": "YulBlock",
                      "src": "1472:1249:29",
                      "statements": [
                        {
                          "nativeSrc": "1482:24:29",
                          "nodeType": "YulVariableDeclaration",
                          "src": "1482:24:29",
                          "value": {
                            "arguments": [
                              {
                                "name": "src",
                                "nativeSrc": "1502:3:29",
                                "nodeType": "YulIdentifier",
                                "src": "1502:3:29"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "1496:5:29",
                              "nodeType": "YulIdentifier",
                              "src": "1496:5:29"
                            },
                            "nativeSrc": "1496:10:29",
                            "nodeType": "YulFunctionCall",
                            "src": "1496:10:29"
                          },
                          "variables": [
                            {
                              "name": "newLen",
                              "nativeSrc": "1486:6:29",
                              "nodeType": "YulTypedName",
                              "src": "1486:6:29",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "1549:22:29",
                            "nodeType": "YulBlock",
                            "src": "1549:22:29",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nativeSrc": "1551:16:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "1551:16:29"
                                  },
                                  "nativeSrc": "1551:18:29",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1551:18:29"
                                },
                                "nativeSrc": "1551:18:29",
                                "nodeType": "YulExpressionStatement",
                                "src": "1551:18:29"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nativeSrc": "1521:6:29",
                                "nodeType": "YulIdentifier",
                                "src": "1521:6:29"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "1537:2:29",
                                        "nodeType": "YulLiteral",
                                        "src": "1537:2:29",
                                        "type": "",
                                        "value": "64"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "1541:1:29",
                                        "nodeType": "YulLiteral",
                                        "src": "1541:1:29",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nativeSrc": "1533:3:29",
                                      "nodeType": "YulIdentifier",
                                      "src": "1533:3:29"
                                    },
                                    "nativeSrc": "1533:10:29",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1533:10:29"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1545:1:29",
                                    "nodeType": "YulLiteral",
                                    "src": "1545:1:29",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "1529:3:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "1529:3:29"
                                },
                                "nativeSrc": "1529:18:29",
                                "nodeType": "YulFunctionCall",
                                "src": "1529:18:29"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "1518:2:29",
                              "nodeType": "YulIdentifier",
                              "src": "1518:2:29"
                            },
                            "nativeSrc": "1518:30:29",
                            "nodeType": "YulFunctionCall",
                            "src": "1518:30:29"
                          },
                          "nativeSrc": "1515:56:29",
                          "nodeType": "YulIf",
                          "src": "1515:56:29"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "slot",
                                "nativeSrc": "1624:4:29",
                                "nodeType": "YulIdentifier",
                                "src": "1624:4:29"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "slot",
                                        "nativeSrc": "1662:4:29",
                                        "nodeType": "YulIdentifier",
                                        "src": "1662:4:29"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sload",
                                      "nativeSrc": "1656:5:29",
                                      "nodeType": "YulIdentifier",
                                      "src": "1656:5:29"
                                    },
                                    "nativeSrc": "1656:11:29",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1656:11:29"
                                  }
                                ],
                                "functionName": {
                                  "name": "extract_byte_array_length",
                                  "nativeSrc": "1630:25:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "1630:25:29"
                                },
                                "nativeSrc": "1630:38:29",
                                "nodeType": "YulFunctionCall",
                                "src": "1630:38:29"
                              },
                              {
                                "name": "newLen",
                                "nativeSrc": "1670:6:29",
                                "nodeType": "YulIdentifier",
                                "src": "1670:6:29"
                              }
                            ],
                            "functionName": {
                              "name": "clean_up_bytearray_end_slots_string_storage",
                              "nativeSrc": "1580:43:29",
                              "nodeType": "YulIdentifier",
                              "src": "1580:43:29"
                            },
                            "nativeSrc": "1580:97:29",
                            "nodeType": "YulFunctionCall",
                            "src": "1580:97:29"
                          },
                          "nativeSrc": "1580:97:29",
                          "nodeType": "YulExpressionStatement",
                          "src": "1580:97:29"
                        },
                        {
                          "nativeSrc": "1686:18:29",
                          "nodeType": "YulVariableDeclaration",
                          "src": "1686:18:29",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "1703:1:29",
                            "nodeType": "YulLiteral",
                            "src": "1703:1:29",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "srcOffset",
                              "nativeSrc": "1690:9:29",
                              "nodeType": "YulTypedName",
                              "src": "1690:9:29",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1713:23:29",
                          "nodeType": "YulVariableDeclaration",
                          "src": "1713:23:29",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "1732:4:29",
                            "nodeType": "YulLiteral",
                            "src": "1732:4:29",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "srcOffset_1",
                              "nativeSrc": "1717:11:29",
                              "nodeType": "YulTypedName",
                              "src": "1717:11:29",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1745:17:29",
                          "nodeType": "YulAssignment",
                          "src": "1745:17:29",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "1758:4:29",
                            "nodeType": "YulLiteral",
                            "src": "1758:4:29",
                            "type": "",
                            "value": "0x20"
                          },
                          "variableNames": [
                            {
                              "name": "srcOffset",
                              "nativeSrc": "1745:9:29",
                              "nodeType": "YulIdentifier",
                              "src": "1745:9:29"
                            }
                          ]
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nativeSrc": "1808:656:29",
                                "nodeType": "YulBlock",
                                "src": "1808:656:29",
                                "statements": [
                                  {
                                    "nativeSrc": "1822:35:29",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "1822:35:29",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "newLen",
                                          "nativeSrc": "1841:6:29",
                                          "nodeType": "YulIdentifier",
                                          "src": "1841:6:29"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nativeSrc": "1853:2:29",
                                              "nodeType": "YulLiteral",
                                              "src": "1853:2:29",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "not",
                                            "nativeSrc": "1849:3:29",
                                            "nodeType": "YulIdentifier",
                                            "src": "1849:3:29"
                                          },
                                          "nativeSrc": "1849:7:29",
                                          "nodeType": "YulFunctionCall",
                                          "src": "1849:7:29"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nativeSrc": "1837:3:29",
                                        "nodeType": "YulIdentifier",
                                        "src": "1837:3:29"
                                      },
                                      "nativeSrc": "1837:20:29",
                                      "nodeType": "YulFunctionCall",
                                      "src": "1837:20:29"
                                    },
                                    "variables": [
                                      {
                                        "name": "loopEnd",
                                        "nativeSrc": "1826:7:29",
                                        "nodeType": "YulTypedName",
                                        "src": "1826:7:29",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nativeSrc": "1870:49:29",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "1870:49:29",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nativeSrc": "1914:4:29",
                                          "nodeType": "YulIdentifier",
                                          "src": "1914:4:29"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "array_dataslot_string_storage",
                                        "nativeSrc": "1884:29:29",
                                        "nodeType": "YulIdentifier",
                                        "src": "1884:29:29"
                                      },
                                      "nativeSrc": "1884:35:29",
                                      "nodeType": "YulFunctionCall",
                                      "src": "1884:35:29"
                                    },
                                    "variables": [
                                      {
                                        "name": "dstPtr",
                                        "nativeSrc": "1874:6:29",
                                        "nodeType": "YulTypedName",
                                        "src": "1874:6:29",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nativeSrc": "1932:10:29",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "1932:10:29",
                                    "value": {
                                      "kind": "number",
                                      "nativeSrc": "1941:1:29",
                                      "nodeType": "YulLiteral",
                                      "src": "1941:1:29",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "i",
                                        "nativeSrc": "1936:1:29",
                                        "nodeType": "YulTypedName",
                                        "src": "1936:1:29",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nativeSrc": "2019:172:29",
                                      "nodeType": "YulBlock",
                                      "src": "2019:172:29",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nativeSrc": "2044:6:29",
                                                "nodeType": "YulIdentifier",
                                                "src": "2044:6:29"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "src",
                                                        "nativeSrc": "2062:3:29",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "2062:3:29"
                                                      },
                                                      {
                                                        "name": "srcOffset",
                                                        "nativeSrc": "2067:9:29",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "2067:9:29"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "add",
                                                      "nativeSrc": "2058:3:29",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "2058:3:29"
                                                    },
                                                    "nativeSrc": "2058:19:29",
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "2058:19:29"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "mload",
                                                  "nativeSrc": "2052:5:29",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2052:5:29"
                                                },
                                                "nativeSrc": "2052:26:29",
                                                "nodeType": "YulFunctionCall",
                                                "src": "2052:26:29"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nativeSrc": "2037:6:29",
                                              "nodeType": "YulIdentifier",
                                              "src": "2037:6:29"
                                            },
                                            "nativeSrc": "2037:42:29",
                                            "nodeType": "YulFunctionCall",
                                            "src": "2037:42:29"
                                          },
                                          "nativeSrc": "2037:42:29",
                                          "nodeType": "YulExpressionStatement",
                                          "src": "2037:42:29"
                                        },
                                        {
                                          "nativeSrc": "2096:24:29",
                                          "nodeType": "YulAssignment",
                                          "src": "2096:24:29",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nativeSrc": "2110:6:29",
                                                "nodeType": "YulIdentifier",
                                                "src": "2110:6:29"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "2118:1:29",
                                                "nodeType": "YulLiteral",
                                                "src": "2118:1:29",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nativeSrc": "2106:3:29",
                                              "nodeType": "YulIdentifier",
                                              "src": "2106:3:29"
                                            },
                                            "nativeSrc": "2106:14:29",
                                            "nodeType": "YulFunctionCall",
                                            "src": "2106:14:29"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "dstPtr",
                                              "nativeSrc": "2096:6:29",
                                              "nodeType": "YulIdentifier",
                                              "src": "2096:6:29"
                                            }
                                          ]
                                        },
                                        {
                                          "nativeSrc": "2137:40:29",
                                          "nodeType": "YulAssignment",
                                          "src": "2137:40:29",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "srcOffset",
                                                "nativeSrc": "2154:9:29",
                                                "nodeType": "YulIdentifier",
                                                "src": "2154:9:29"
                                              },
                                              {
                                                "name": "srcOffset_1",
                                                "nativeSrc": "2165:11:29",
                                                "nodeType": "YulIdentifier",
                                                "src": "2165:11:29"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nativeSrc": "2150:3:29",
                                              "nodeType": "YulIdentifier",
                                              "src": "2150:3:29"
                                            },
                                            "nativeSrc": "2150:27:29",
                                            "nodeType": "YulFunctionCall",
                                            "src": "2150:27:29"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "srcOffset",
                                              "nativeSrc": "2137:9:29",
                                              "nodeType": "YulIdentifier",
                                              "src": "2137:9:29"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nativeSrc": "1966:1:29",
                                          "nodeType": "YulIdentifier",
                                          "src": "1966:1:29"
                                        },
                                        {
                                          "name": "loopEnd",
                                          "nativeSrc": "1969:7:29",
                                          "nodeType": "YulIdentifier",
                                          "src": "1969:7:29"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nativeSrc": "1963:2:29",
                                        "nodeType": "YulIdentifier",
                                        "src": "1963:2:29"
                                      },
                                      "nativeSrc": "1963:14:29",
                                      "nodeType": "YulFunctionCall",
                                      "src": "1963:14:29"
                                    },
                                    "nativeSrc": "1955:236:29",
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nativeSrc": "1978:28:29",
                                      "nodeType": "YulBlock",
                                      "src": "1978:28:29",
                                      "statements": [
                                        {
                                          "nativeSrc": "1980:24:29",
                                          "nodeType": "YulAssignment",
                                          "src": "1980:24:29",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "i",
                                                "nativeSrc": "1989:1:29",
                                                "nodeType": "YulIdentifier",
                                                "src": "1989:1:29"
                                              },
                                              {
                                                "name": "srcOffset_1",
                                                "nativeSrc": "1992:11:29",
                                                "nodeType": "YulIdentifier",
                                                "src": "1992:11:29"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nativeSrc": "1985:3:29",
                                              "nodeType": "YulIdentifier",
                                              "src": "1985:3:29"
                                            },
                                            "nativeSrc": "1985:19:29",
                                            "nodeType": "YulFunctionCall",
                                            "src": "1985:19:29"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "i",
                                              "nativeSrc": "1980:1:29",
                                              "nodeType": "YulIdentifier",
                                              "src": "1980:1:29"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nativeSrc": "1959:3:29",
                                      "nodeType": "YulBlock",
                                      "src": "1959:3:29",
                                      "statements": []
                                    },
                                    "src": "1955:236:29"
                                  },
                                  {
                                    "body": {
                                      "nativeSrc": "2239:166:29",
                                      "nodeType": "YulBlock",
                                      "src": "2239:166:29",
                                      "statements": [
                                        {
                                          "nativeSrc": "2257:43:29",
                                          "nodeType": "YulVariableDeclaration",
                                          "src": "2257:43:29",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nativeSrc": "2284:3:29",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2284:3:29"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nativeSrc": "2289:9:29",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2289:9:29"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nativeSrc": "2280:3:29",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2280:3:29"
                                                },
                                                "nativeSrc": "2280:19:29",
                                                "nodeType": "YulFunctionCall",
                                                "src": "2280:19:29"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nativeSrc": "2274:5:29",
                                              "nodeType": "YulIdentifier",
                                              "src": "2274:5:29"
                                            },
                                            "nativeSrc": "2274:26:29",
                                            "nodeType": "YulFunctionCall",
                                            "src": "2274:26:29"
                                          },
                                          "variables": [
                                            {
                                              "name": "lastValue",
                                              "nativeSrc": "2261:9:29",
                                              "nodeType": "YulTypedName",
                                              "src": "2261:9:29",
                                              "type": ""
                                            }
                                          ]
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nativeSrc": "2324:6:29",
                                                "nodeType": "YulIdentifier",
                                                "src": "2324:6:29"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "lastValue",
                                                    "nativeSrc": "2336:9:29",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2336:9:29"
                                                  },
                                                  {
                                                    "arguments": [
                                                      {
                                                        "arguments": [
                                                          {
                                                            "arguments": [
                                                              {
                                                                "arguments": [
                                                                  {
                                                                    "kind": "number",
                                                                    "nativeSrc": "2363:1:29",
                                                                    "nodeType": "YulLiteral",
                                                                    "src": "2363:1:29",
                                                                    "type": "",
                                                                    "value": "3"
                                                                  },
                                                                  {
                                                                    "name": "newLen",
                                                                    "nativeSrc": "2366:6:29",
                                                                    "nodeType": "YulIdentifier",
                                                                    "src": "2366:6:29"
                                                                  }
                                                                ],
                                                                "functionName": {
                                                                  "name": "shl",
                                                                  "nativeSrc": "2359:3:29",
                                                                  "nodeType": "YulIdentifier",
                                                                  "src": "2359:3:29"
                                                                },
                                                                "nativeSrc": "2359:14:29",
                                                                "nodeType": "YulFunctionCall",
                                                                "src": "2359:14:29"
                                                              },
                                                              {
                                                                "kind": "number",
                                                                "nativeSrc": "2375:3:29",
                                                                "nodeType": "YulLiteral",
                                                                "src": "2375:3:29",
                                                                "type": "",
                                                                "value": "248"
                                                              }
                                                            ],
                                                            "functionName": {
                                                              "name": "and",
                                                              "nativeSrc": "2355:3:29",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "2355:3:29"
                                                            },
                                                            "nativeSrc": "2355:24:29",
                                                            "nodeType": "YulFunctionCall",
                                                            "src": "2355:24:29"
                                                          },
                                                          {
                                                            "arguments": [
                                                              {
                                                                "kind": "number",
                                                                "nativeSrc": "2385:1:29",
                                                                "nodeType": "YulLiteral",
                                                                "src": "2385:1:29",
                                                                "type": "",
                                                                "value": "0"
                                                              }
                                                            ],
                                                            "functionName": {
                                                              "name": "not",
                                                              "nativeSrc": "2381:3:29",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "2381:3:29"
                                                            },
                                                            "nativeSrc": "2381:6:29",
                                                            "nodeType": "YulFunctionCall",
                                                            "src": "2381:6:29"
                                                          }
                                                        ],
                                                        "functionName": {
                                                          "name": "shr",
                                                          "nativeSrc": "2351:3:29",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "2351:3:29"
                                                        },
                                                        "nativeSrc": "2351:37:29",
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "2351:37:29"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "not",
                                                      "nativeSrc": "2347:3:29",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "2347:3:29"
                                                    },
                                                    "nativeSrc": "2347:42:29",
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "2347:42:29"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "and",
                                                  "nativeSrc": "2332:3:29",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2332:3:29"
                                                },
                                                "nativeSrc": "2332:58:29",
                                                "nodeType": "YulFunctionCall",
                                                "src": "2332:58:29"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nativeSrc": "2317:6:29",
                                              "nodeType": "YulIdentifier",
                                              "src": "2317:6:29"
                                            },
                                            "nativeSrc": "2317:74:29",
                                            "nodeType": "YulFunctionCall",
                                            "src": "2317:74:29"
                                          },
                                          "nativeSrc": "2317:74:29",
                                          "nodeType": "YulExpressionStatement",
                                          "src": "2317:74:29"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "loopEnd",
                                          "nativeSrc": "2210:7:29",
                                          "nodeType": "YulIdentifier",
                                          "src": "2210:7:29"
                                        },
                                        {
                                          "name": "newLen",
                                          "nativeSrc": "2219:6:29",
                                          "nodeType": "YulIdentifier",
                                          "src": "2219:6:29"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nativeSrc": "2207:2:29",
                                        "nodeType": "YulIdentifier",
                                        "src": "2207:2:29"
                                      },
                                      "nativeSrc": "2207:19:29",
                                      "nodeType": "YulFunctionCall",
                                      "src": "2207:19:29"
                                    },
                                    "nativeSrc": "2204:201:29",
                                    "nodeType": "YulIf",
                                    "src": "2204:201:29"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nativeSrc": "2425:4:29",
                                          "nodeType": "YulIdentifier",
                                          "src": "2425:4:29"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nativeSrc": "2439:1:29",
                                                  "nodeType": "YulLiteral",
                                                  "src": "2439:1:29",
                                                  "type": "",
                                                  "value": "1"
                                                },
                                                {
                                                  "name": "newLen",
                                                  "nativeSrc": "2442:6:29",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2442:6:29"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "shl",
                                                "nativeSrc": "2435:3:29",
                                                "nodeType": "YulIdentifier",
                                                "src": "2435:3:29"
                                              },
                                              "nativeSrc": "2435:14:29",
                                              "nodeType": "YulFunctionCall",
                                              "src": "2435:14:29"
                                            },
                                            {
                                              "kind": "number",
                                              "nativeSrc": "2451:1:29",
                                              "nodeType": "YulLiteral",
                                              "src": "2451:1:29",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "2431:3:29",
                                            "nodeType": "YulIdentifier",
                                            "src": "2431:3:29"
                                          },
                                          "nativeSrc": "2431:22:29",
                                          "nodeType": "YulFunctionCall",
                                          "src": "2431:22:29"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nativeSrc": "2418:6:29",
                                        "nodeType": "YulIdentifier",
                                        "src": "2418:6:29"
                                      },
                                      "nativeSrc": "2418:36:29",
                                      "nodeType": "YulFunctionCall",
                                      "src": "2418:36:29"
                                    },
                                    "nativeSrc": "2418:36:29",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2418:36:29"
                                  }
                                ]
                              },
                              "nativeSrc": "1801:663:29",
                              "nodeType": "YulCase",
                              "src": "1801:663:29",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "1806:1:29",
                                "nodeType": "YulLiteral",
                                "src": "1806:1:29",
                                "type": "",
                                "value": "1"
                              }
                            },
                            {
                              "body": {
                                "nativeSrc": "2481:234:29",
                                "nodeType": "YulBlock",
                                "src": "2481:234:29",
                                "statements": [
                                  {
                                    "nativeSrc": "2495:14:29",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "2495:14:29",
                                    "value": {
                                      "kind": "number",
                                      "nativeSrc": "2508:1:29",
                                      "nodeType": "YulLiteral",
                                      "src": "2508:1:29",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "2499:5:29",
                                        "nodeType": "YulTypedName",
                                        "src": "2499:5:29",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nativeSrc": "2544:67:29",
                                      "nodeType": "YulBlock",
                                      "src": "2544:67:29",
                                      "statements": [
                                        {
                                          "nativeSrc": "2562:35:29",
                                          "nodeType": "YulAssignment",
                                          "src": "2562:35:29",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nativeSrc": "2581:3:29",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2581:3:29"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nativeSrc": "2586:9:29",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2586:9:29"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nativeSrc": "2577:3:29",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2577:3:29"
                                                },
                                                "nativeSrc": "2577:19:29",
                                                "nodeType": "YulFunctionCall",
                                                "src": "2577:19:29"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nativeSrc": "2571:5:29",
                                              "nodeType": "YulIdentifier",
                                              "src": "2571:5:29"
                                            },
                                            "nativeSrc": "2571:26:29",
                                            "nodeType": "YulFunctionCall",
                                            "src": "2571:26:29"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "value",
                                              "nativeSrc": "2562:5:29",
                                              "nodeType": "YulIdentifier",
                                              "src": "2562:5:29"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "name": "newLen",
                                      "nativeSrc": "2525:6:29",
                                      "nodeType": "YulIdentifier",
                                      "src": "2525:6:29"
                                    },
                                    "nativeSrc": "2522:89:29",
                                    "nodeType": "YulIf",
                                    "src": "2522:89:29"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nativeSrc": "2631:4:29",
                                          "nodeType": "YulIdentifier",
                                          "src": "2631:4:29"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "value",
                                              "nativeSrc": "2690:5:29",
                                              "nodeType": "YulIdentifier",
                                              "src": "2690:5:29"
                                            },
                                            {
                                              "name": "newLen",
                                              "nativeSrc": "2697:6:29",
                                              "nodeType": "YulIdentifier",
                                              "src": "2697:6:29"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "extract_used_part_and_set_length_of_short_byte_array",
                                            "nativeSrc": "2637:52:29",
                                            "nodeType": "YulIdentifier",
                                            "src": "2637:52:29"
                                          },
                                          "nativeSrc": "2637:67:29",
                                          "nodeType": "YulFunctionCall",
                                          "src": "2637:67:29"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nativeSrc": "2624:6:29",
                                        "nodeType": "YulIdentifier",
                                        "src": "2624:6:29"
                                      },
                                      "nativeSrc": "2624:81:29",
                                      "nodeType": "YulFunctionCall",
                                      "src": "2624:81:29"
                                    },
                                    "nativeSrc": "2624:81:29",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2624:81:29"
                                  }
                                ]
                              },
                              "nativeSrc": "2473:242:29",
                              "nodeType": "YulCase",
                              "src": "2473:242:29",
                              "value": "default"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nativeSrc": "1781:6:29",
                                "nodeType": "YulIdentifier",
                                "src": "1781:6:29"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1789:2:29",
                                "nodeType": "YulLiteral",
                                "src": "1789:2:29",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "1778:2:29",
                              "nodeType": "YulIdentifier",
                              "src": "1778:2:29"
                            },
                            "nativeSrc": "1778:14:29",
                            "nodeType": "YulFunctionCall",
                            "src": "1778:14:29"
                          },
                          "nativeSrc": "1771:944:29",
                          "nodeType": "YulSwitch",
                          "src": "1771:944:29"
                        }
                      ]
                    },
                    "name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
                    "nativeSrc": "1376:1345:29",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "slot",
                        "nativeSrc": "1457:4:29",
                        "nodeType": "YulTypedName",
                        "src": "1457:4:29",
                        "type": ""
                      },
                      {
                        "name": "src",
                        "nativeSrc": "1463:3:29",
                        "nodeType": "YulTypedName",
                        "src": "1463:3:29",
                        "type": ""
                      }
                    ],
                    "src": "1376:1345:29"
                  },
                  {
                    "body": {
                      "nativeSrc": "2827:102:29",
                      "nodeType": "YulBlock",
                      "src": "2827:102:29",
                      "statements": [
                        {
                          "nativeSrc": "2837:26:29",
                          "nodeType": "YulAssignment",
                          "src": "2837:26:29",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "2849:9:29",
                                "nodeType": "YulIdentifier",
                                "src": "2849:9:29"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2860:2:29",
                                "nodeType": "YulLiteral",
                                "src": "2860:2:29",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "2845:3:29",
                              "nodeType": "YulIdentifier",
                              "src": "2845:3:29"
                            },
                            "nativeSrc": "2845:18:29",
                            "nodeType": "YulFunctionCall",
                            "src": "2845:18:29"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "2837:4:29",
                              "nodeType": "YulIdentifier",
                              "src": "2837:4:29"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "2879:9:29",
                                "nodeType": "YulIdentifier",
                                "src": "2879:9:29"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "2894:6:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "2894:6:29"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nativeSrc": "2910:3:29",
                                            "nodeType": "YulLiteral",
                                            "src": "2910:3:29",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "2915:1:29",
                                            "nodeType": "YulLiteral",
                                            "src": "2915:1:29",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nativeSrc": "2906:3:29",
                                          "nodeType": "YulIdentifier",
                                          "src": "2906:3:29"
                                        },
                                        "nativeSrc": "2906:11:29",
                                        "nodeType": "YulFunctionCall",
                                        "src": "2906:11:29"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "2919:1:29",
                                        "nodeType": "YulLiteral",
                                        "src": "2919:1:29",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "2902:3:29",
                                      "nodeType": "YulIdentifier",
                                      "src": "2902:3:29"
                                    },
                                    "nativeSrc": "2902:19:29",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2902:19:29"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "2890:3:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "2890:3:29"
                                },
                                "nativeSrc": "2890:32:29",
                                "nodeType": "YulFunctionCall",
                                "src": "2890:32:29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "2872:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "2872:6:29"
                            },
                            "nativeSrc": "2872:51:29",
                            "nodeType": "YulFunctionCall",
                            "src": "2872:51:29"
                          },
                          "nativeSrc": "2872:51:29",
                          "nodeType": "YulExpressionStatement",
                          "src": "2872:51:29"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nativeSrc": "2726:203:29",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "2796:9:29",
                        "nodeType": "YulTypedName",
                        "src": "2796:9:29",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "2807:6:29",
                        "nodeType": "YulTypedName",
                        "src": "2807:6:29",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "2818:4:29",
                        "nodeType": "YulTypedName",
                        "src": "2818:4:29",
                        "type": ""
                      }
                    ],
                    "src": "2726:203:29"
                  },
                  {
                    "body": {
                      "nativeSrc": "2982:174:29",
                      "nodeType": "YulBlock",
                      "src": "2982:174:29",
                      "statements": [
                        {
                          "nativeSrc": "2992:16:29",
                          "nodeType": "YulAssignment",
                          "src": "2992:16:29",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nativeSrc": "3003:1:29",
                                "nodeType": "YulIdentifier",
                                "src": "3003:1:29"
                              },
                              {
                                "name": "y",
                                "nativeSrc": "3006:1:29",
                                "nodeType": "YulIdentifier",
                                "src": "3006:1:29"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "2999:3:29",
                              "nodeType": "YulIdentifier",
                              "src": "2999:3:29"
                            },
                            "nativeSrc": "2999:9:29",
                            "nodeType": "YulFunctionCall",
                            "src": "2999:9:29"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nativeSrc": "2992:3:29",
                              "nodeType": "YulIdentifier",
                              "src": "2992:3:29"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "3039:111:29",
                            "nodeType": "YulBlock",
                            "src": "3039:111:29",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "3060:1:29",
                                      "nodeType": "YulLiteral",
                                      "src": "3060:1:29",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "3067:3:29",
                                          "nodeType": "YulLiteral",
                                          "src": "3067:3:29",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "3072:10:29",
                                          "nodeType": "YulLiteral",
                                          "src": "3072:10:29",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nativeSrc": "3063:3:29",
                                        "nodeType": "YulIdentifier",
                                        "src": "3063:3:29"
                                      },
                                      "nativeSrc": "3063:20:29",
                                      "nodeType": "YulFunctionCall",
                                      "src": "3063:20:29"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "3053:6:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "3053:6:29"
                                  },
                                  "nativeSrc": "3053:31:29",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3053:31:29"
                                },
                                "nativeSrc": "3053:31:29",
                                "nodeType": "YulExpressionStatement",
                                "src": "3053:31:29"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "3104:1:29",
                                      "nodeType": "YulLiteral",
                                      "src": "3104:1:29",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "3107:4:29",
                                      "nodeType": "YulLiteral",
                                      "src": "3107:4:29",
                                      "type": "",
                                      "value": "0x11"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "3097:6:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "3097:6:29"
                                  },
                                  "nativeSrc": "3097:15:29",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3097:15:29"
                                },
                                "nativeSrc": "3097:15:29",
                                "nodeType": "YulExpressionStatement",
                                "src": "3097:15:29"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "3132:1:29",
                                      "nodeType": "YulLiteral",
                                      "src": "3132:1:29",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "3135:4:29",
                                      "nodeType": "YulLiteral",
                                      "src": "3135:4:29",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "3125:6:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "3125:6:29"
                                  },
                                  "nativeSrc": "3125:15:29",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3125:15:29"
                                },
                                "nativeSrc": "3125:15:29",
                                "nodeType": "YulExpressionStatement",
                                "src": "3125:15:29"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nativeSrc": "3023:1:29",
                                "nodeType": "YulIdentifier",
                                "src": "3023:1:29"
                              },
                              {
                                "name": "sum",
                                "nativeSrc": "3026:3:29",
                                "nodeType": "YulIdentifier",
                                "src": "3026:3:29"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "3020:2:29",
                              "nodeType": "YulIdentifier",
                              "src": "3020:2:29"
                            },
                            "nativeSrc": "3020:10:29",
                            "nodeType": "YulFunctionCall",
                            "src": "3020:10:29"
                          },
                          "nativeSrc": "3017:133:29",
                          "nodeType": "YulIf",
                          "src": "3017:133:29"
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nativeSrc": "2934:222:29",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nativeSrc": "2965:1:29",
                        "nodeType": "YulTypedName",
                        "src": "2965:1:29",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nativeSrc": "2968:1:29",
                        "nodeType": "YulTypedName",
                        "src": "2968:1:29",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nativeSrc": "2974:3:29",
                        "nodeType": "YulTypedName",
                        "src": "2974:3:29",
                        "type": ""
                      }
                    ],
                    "src": "2934:222:29"
                  },
                  {
                    "body": {
                      "nativeSrc": "3318:188:29",
                      "nodeType": "YulBlock",
                      "src": "3318:188:29",
                      "statements": [
                        {
                          "nativeSrc": "3328:26:29",
                          "nodeType": "YulAssignment",
                          "src": "3328:26:29",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "3340:9:29",
                                "nodeType": "YulIdentifier",
                                "src": "3340:9:29"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3351:2:29",
                                "nodeType": "YulLiteral",
                                "src": "3351:2:29",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "3336:3:29",
                              "nodeType": "YulIdentifier",
                              "src": "3336:3:29"
                            },
                            "nativeSrc": "3336:18:29",
                            "nodeType": "YulFunctionCall",
                            "src": "3336:18:29"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "3328:4:29",
                              "nodeType": "YulIdentifier",
                              "src": "3328:4:29"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "3370:9:29",
                                "nodeType": "YulIdentifier",
                                "src": "3370:9:29"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "3385:6:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "3385:6:29"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nativeSrc": "3401:3:29",
                                            "nodeType": "YulLiteral",
                                            "src": "3401:3:29",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "3406:1:29",
                                            "nodeType": "YulLiteral",
                                            "src": "3406:1:29",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nativeSrc": "3397:3:29",
                                          "nodeType": "YulIdentifier",
                                          "src": "3397:3:29"
                                        },
                                        "nativeSrc": "3397:11:29",
                                        "nodeType": "YulFunctionCall",
                                        "src": "3397:11:29"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "3410:1:29",
                                        "nodeType": "YulLiteral",
                                        "src": "3410:1:29",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "3393:3:29",
                                      "nodeType": "YulIdentifier",
                                      "src": "3393:3:29"
                                    },
                                    "nativeSrc": "3393:19:29",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3393:19:29"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "3381:3:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "3381:3:29"
                                },
                                "nativeSrc": "3381:32:29",
                                "nodeType": "YulFunctionCall",
                                "src": "3381:32:29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "3363:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "3363:6:29"
                            },
                            "nativeSrc": "3363:51:29",
                            "nodeType": "YulFunctionCall",
                            "src": "3363:51:29"
                          },
                          "nativeSrc": "3363:51:29",
                          "nodeType": "YulExpressionStatement",
                          "src": "3363:51:29"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "3434:9:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "3434:9:29"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3445:2:29",
                                    "nodeType": "YulLiteral",
                                    "src": "3445:2:29",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "3430:3:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "3430:3:29"
                                },
                                "nativeSrc": "3430:18:29",
                                "nodeType": "YulFunctionCall",
                                "src": "3430:18:29"
                              },
                              {
                                "name": "value1",
                                "nativeSrc": "3450:6:29",
                                "nodeType": "YulIdentifier",
                                "src": "3450:6:29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "3423:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "3423:6:29"
                            },
                            "nativeSrc": "3423:34:29",
                            "nodeType": "YulFunctionCall",
                            "src": "3423:34:29"
                          },
                          "nativeSrc": "3423:34:29",
                          "nodeType": "YulExpressionStatement",
                          "src": "3423:34:29"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "3477:9:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "3477:9:29"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3488:2:29",
                                    "nodeType": "YulLiteral",
                                    "src": "3488:2:29",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "3473:3:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "3473:3:29"
                                },
                                "nativeSrc": "3473:18:29",
                                "nodeType": "YulFunctionCall",
                                "src": "3473:18:29"
                              },
                              {
                                "name": "value2",
                                "nativeSrc": "3493:6:29",
                                "nodeType": "YulIdentifier",
                                "src": "3493:6:29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "3466:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "3466:6:29"
                            },
                            "nativeSrc": "3466:34:29",
                            "nodeType": "YulFunctionCall",
                            "src": "3466:34:29"
                          },
                          "nativeSrc": "3466:34:29",
                          "nodeType": "YulExpressionStatement",
                          "src": "3466:34:29"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
                    "nativeSrc": "3161:345:29",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "3271:9:29",
                        "nodeType": "YulTypedName",
                        "src": "3271:9:29",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nativeSrc": "3282:6:29",
                        "nodeType": "YulTypedName",
                        "src": "3282:6:29",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "3290:6:29",
                        "nodeType": "YulTypedName",
                        "src": "3290:6:29",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "3298:6:29",
                        "nodeType": "YulTypedName",
                        "src": "3298:6:29",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "3309:4:29",
                        "nodeType": "YulTypedName",
                        "src": "3309:4:29",
                        "type": ""
                      }
                    ],
                    "src": "3161:345:29"
                  },
                  {
                    "body": {
                      "nativeSrc": "3612:76:29",
                      "nodeType": "YulBlock",
                      "src": "3612:76:29",
                      "statements": [
                        {
                          "nativeSrc": "3622:26:29",
                          "nodeType": "YulAssignment",
                          "src": "3622:26:29",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "3634:9:29",
                                "nodeType": "YulIdentifier",
                                "src": "3634:9:29"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3645:2:29",
                                "nodeType": "YulLiteral",
                                "src": "3645:2:29",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "3630:3:29",
                              "nodeType": "YulIdentifier",
                              "src": "3630:3:29"
                            },
                            "nativeSrc": "3630:18:29",
                            "nodeType": "YulFunctionCall",
                            "src": "3630:18:29"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "3622:4:29",
                              "nodeType": "YulIdentifier",
                              "src": "3622:4:29"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "3664:9:29",
                                "nodeType": "YulIdentifier",
                                "src": "3664:9:29"
                              },
                              {
                                "name": "value0",
                                "nativeSrc": "3675:6:29",
                                "nodeType": "YulIdentifier",
                                "src": "3675:6:29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "3657:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "3657:6:29"
                            },
                            "nativeSrc": "3657:25:29",
                            "nodeType": "YulFunctionCall",
                            "src": "3657:25:29"
                          },
                          "nativeSrc": "3657:25:29",
                          "nodeType": "YulExpressionStatement",
                          "src": "3657:25:29"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nativeSrc": "3511:177:29",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "3581:9:29",
                        "nodeType": "YulTypedName",
                        "src": "3581:9:29",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "3592:6:29",
                        "nodeType": "YulTypedName",
                        "src": "3592:6:29",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "3603:4:29",
                        "nodeType": "YulTypedName",
                        "src": "3603:4:29",
                        "type": ""
                      }
                    ],
                    "src": "3511:177:29"
                  }
                ]
              },
              "contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := 0x20\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n}",
              "id": 29,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "60806040523480156200001157600080fd5b506040518060400160405280600e81526020016d26b2ba30a9ba30b5b2aa37b5b2b760911b815250604051806040016040528060038152602001621354d560ea1b8152508160039081620000669190620002b7565b506004620000758282620002b7565b50505062000095336a084595161401484a0000006200009b60201b60201c565b620003ab565b6001600160a01b038216620000cb5760405163ec442f0560e01b8152600060048201526024015b60405180910390fd5b620000d960008383620000dd565b5050565b6001600160a01b0383166200010c57806002600082825462000100919062000383565b90915550620001809050565b6001600160a01b03831660009081526020819052604090205481811015620001615760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401620000c2565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166200019e57600280548290039055620001bd565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200020391815260200190565b60405180910390a3505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200023b57607f821691505b6020821081036200025c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002b2576000816000526020600020601f850160051c810160208610156200028d5750805b601f850160051c820191505b81811015620002ae5782815560010162000299565b5050505b505050565b81516001600160401b03811115620002d357620002d362000210565b620002eb81620002e4845462000226565b8462000262565b602080601f8311600181146200032357600084156200030a5750858301515b600019600386901b1c1916600185901b178555620002ae565b600085815260208120601f198616915b82811015620003545788860151825594840194600190910190840162000333565b5085821015620003735787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80820180821115620003a557634e487b7160e01b600052601160045260246000fd5b92915050565b61072280620003bb6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce567146100fe57806370a082311461010d57806395d89b4114610136578063a9059cbb1461013e578063dd62ed3e1461015157600080fd5b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100d957806323b872dd146100eb575b600080fd5b6100a061018a565b6040516100ad919061056b565b60405180910390f35b6100c96100c43660046105d6565b61021c565b60405190151581526020016100ad565b6002545b6040519081526020016100ad565b6100c96100f9366004610600565b610236565b604051601281526020016100ad565b6100dd61011b36600461063c565b6001600160a01b031660009081526020819052604090205490565b6100a061025a565b6100c961014c3660046105d6565b610269565b6100dd61015f36600461065e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461019990610691565b80601f01602080910402602001604051908101604052809291908181526020018280546101c590610691565b80156102125780601f106101e757610100808354040283529160200191610212565b820191906000526020600020905b8154815290600101906020018083116101f557829003601f168201915b5050505050905090565b60003361022a818585610277565b60019150505b92915050565b600033610244858285610289565b61024f85858561030d565b506001949350505050565b60606004805461019990610691565b60003361022a81858561030d565b610284838383600161036c565b505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981101561030757818110156102f857604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064015b60405180910390fd5b6103078484848403600061036c565b50505050565b6001600160a01b03831661033757604051634b637e8f60e11b8152600060048201526024016102ef565b6001600160a01b0382166103615760405163ec442f0560e01b8152600060048201526024016102ef565b610284838383610441565b6001600160a01b0384166103965760405163e602df0560e01b8152600060048201526024016102ef565b6001600160a01b0383166103c057604051634a1406b160e11b8152600060048201526024016102ef565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561030757826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161043391815260200190565b60405180910390a350505050565b6001600160a01b03831661046c57806002600082825461046191906106cb565b909155506104de9050565b6001600160a01b038316600090815260208190526040902054818110156104bf5760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016102ef565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166104fa57600280548290039055610519565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161055e91815260200190565b60405180910390a3505050565b60006020808352835180602085015260005b818110156105995785810183015185820160400152820161057d565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146105d157600080fd5b919050565b600080604083850312156105e957600080fd5b6105f2836105ba565b946020939093013593505050565b60008060006060848603121561061557600080fd5b61061e846105ba565b925061062c602085016105ba565b9150604084013590509250925092565b60006020828403121561064e57600080fd5b610657826105ba565b9392505050565b6000806040838503121561067157600080fd5b61067a836105ba565b9150610688602084016105ba565b90509250929050565b600181811c908216806106a557607f821691505b6020821081036106c557634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561023057634e487b7160e01b600052601160045260246000fdfea2646970667358221220abaea69e6459a3891e181d751a5abda5c74857fbc793013aa45564dfbda9b89064736f6c63430008160033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH14 0x26B2BA30A9BA30B5B2AA37B5B2B7 PUSH1 0x91 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x1354D5 PUSH1 0xEA SHL DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH3 0x66 SWAP2 SWAP1 PUSH3 0x2B7 JUMP JUMPDEST POP PUSH1 0x4 PUSH3 0x75 DUP3 DUP3 PUSH3 0x2B7 JUMP JUMPDEST POP POP POP PUSH3 0x95 CALLER PUSH11 0x84595161401484A000000 PUSH3 0x9B PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x3AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0xCB JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0xD9 PUSH1 0x0 DUP4 DUP4 PUSH3 0xDD JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH3 0x10C JUMPI DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH3 0x100 SWAP2 SWAP1 PUSH3 0x383 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH3 0x180 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH3 0x161 JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH3 0xC2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0x19E JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH3 0x1BD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH3 0x203 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x23B JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x25C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x2B2 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x28D JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x2AE JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x299 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x2D3 JUMPI PUSH3 0x2D3 PUSH3 0x210 JUMP JUMPDEST PUSH3 0x2EB DUP2 PUSH3 0x2E4 DUP5 SLOAD PUSH3 0x226 JUMP JUMPDEST DUP5 PUSH3 0x262 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x323 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x30A JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x2AE JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x354 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x333 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x373 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH3 0x3A5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x722 DUP1 PUSH3 0x3BB PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x93 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x313CE567 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0xFE JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x13E JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x151 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x98 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xB6 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xD9 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xEB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA0 PUSH2 0x18A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAD SWAP2 SWAP1 PUSH2 0x56B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC9 PUSH2 0xC4 CALLDATASIZE PUSH1 0x4 PUSH2 0x5D6 JUMP JUMPDEST PUSH2 0x21C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAD JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAD JUMP JUMPDEST PUSH2 0xC9 PUSH2 0xF9 CALLDATASIZE PUSH1 0x4 PUSH2 0x600 JUMP JUMPDEST PUSH2 0x236 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAD JUMP JUMPDEST PUSH2 0xDD PUSH2 0x11B CALLDATASIZE PUSH1 0x4 PUSH2 0x63C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x25A JUMP JUMPDEST PUSH2 0xC9 PUSH2 0x14C CALLDATASIZE PUSH1 0x4 PUSH2 0x5D6 JUMP JUMPDEST PUSH2 0x269 JUMP JUMPDEST PUSH2 0xDD PUSH2 0x15F CALLDATASIZE PUSH1 0x4 PUSH2 0x65E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x199 SWAP1 PUSH2 0x691 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1C5 SWAP1 PUSH2 0x691 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x212 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1E7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x212 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1F5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x22A DUP2 DUP6 DUP6 PUSH2 0x277 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x244 DUP6 DUP3 DUP6 PUSH2 0x289 JUMP JUMPDEST PUSH2 0x24F DUP6 DUP6 DUP6 PUSH2 0x30D JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x199 SWAP1 PUSH2 0x691 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x22A DUP2 DUP6 DUP6 PUSH2 0x30D JUMP JUMPDEST PUSH2 0x284 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x36C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 LT ISZERO PUSH2 0x307 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x2F8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x307 DUP5 DUP5 DUP5 DUP5 SUB PUSH1 0x0 PUSH2 0x36C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x337 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x2EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x361 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x2EF JUMP JUMPDEST PUSH2 0x284 DUP4 DUP4 DUP4 PUSH2 0x441 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x396 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x2EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3C0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x2EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0x307 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x433 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x46C JUMPI DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x461 SWAP2 SWAP1 PUSH2 0x6CB JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x4DE SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x4BF JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x2EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x4FA JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0x519 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x55E SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x599 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x57D JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x5D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5F2 DUP4 PUSH2 0x5BA JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x615 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x61E DUP5 PUSH2 0x5BA JUMP JUMPDEST SWAP3 POP PUSH2 0x62C PUSH1 0x20 DUP6 ADD PUSH2 0x5BA JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x64E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x657 DUP3 PUSH2 0x5BA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x671 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x67A DUP4 PUSH2 0x5BA JUMP JUMPDEST SWAP2 POP PUSH2 0x688 PUSH1 0x20 DUP5 ADD PUSH2 0x5BA JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x6A5 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x6C5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x230 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAB 0xAE 0xA6 SWAP15 PUSH5 0x59A3891E18 SAR PUSH22 0x1A5ABDA5C74857FBC793013AA45564DFBDA9B8906473 PUSH16 0x6C634300081600330000000000000000 ",
          "sourceMap": "115:255:28:-:0;;;154:214;;;;;;;;;;1582:113:15;;;;;;;;;;;;;-1:-1:-1;;;1582:113:15;;;;;;;;;;;;;;;;-1:-1:-1;;;1582:113:15;;;1656:5;1648;:13;;;;;;:::i;:::-;-1:-1:-1;1671:7:15;:17;1681:7;1671;:17;:::i;:::-;;1582:113;;308:53:28::1;314:10;326:34;308:5;;;:53;;:::i;:::-;115:255:::0;;7362:208:15;-1:-1:-1;;;;;7432:21:15;;7428:91;;7476:32;;-1:-1:-1;;;7476:32:15;;7505:1;7476:32;;;2872:51:29;2845:18;;7476:32:15;;;;;;;;7428:91;7528:35;7544:1;7548:7;7557:5;7528:7;:35::i;:::-;7362:208;;:::o;5912:1107::-;-1:-1:-1;;;;;6001:18:15;;5997:540;;6153:5;6137:12;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;5997:540:15;;-1:-1:-1;5997:540:15;;-1:-1:-1;;;;;6211:15:15;;6189:19;6211:15;;;;;;;;;;;6244:19;;;6240:115;;;6290:50;;-1:-1:-1;;;6290:50:15;;-1:-1:-1;;;;;3381:32:29;;6290:50:15;;;3363:51:29;3430:18;;;3423:34;;;3473:18;;;3466:34;;;3336:18;;6290:50:15;3161:345:29;6240:115:15;-1:-1:-1;;;;;6475:15:15;;:9;:15;;;;;;;;;;6493:19;;;;6475:37;;5997:540;-1:-1:-1;;;;;6551:16:15;;6547:425;;6714:12;:21;;;;;;;6547:425;;;-1:-1:-1;;;;;6925:13:15;;:9;:13;;;;;;;;;;:22;;;;;;6547:425;7002:2;-1:-1:-1;;;;;6987:25:15;6996:4;-1:-1:-1;;;;;6987:25:15;;7006:5;6987:25;;;;3657::29;;3645:2;3630:18;;3511:177;6987:25:15;;;;;;;;5912:1107;;;:::o;14:127:29:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:380;225:1;221:12;;;;268;;;289:61;;343:4;335:6;331:17;321:27;;289:61;396:2;388:6;385:14;365:18;362:38;359:161;;442:10;437:3;433:20;430:1;423:31;477:4;474:1;467:15;505:4;502:1;495:15;359:161;;146:380;;;:::o;657:543::-;759:2;754:3;751:11;748:446;;;795:1;819:5;816:1;809:16;863:4;860:1;850:18;933:2;921:10;917:19;914:1;910:27;904:4;900:38;969:4;957:10;954:20;951:47;;;-1:-1:-1;992:4:29;951:47;1047:2;1042:3;1038:12;1035:1;1031:20;1025:4;1021:31;1011:41;;1102:82;1120:2;1113:5;1110:13;1102:82;;;1165:17;;;1146:1;1135:13;1102:82;;;1106:3;;;748:446;657:543;;;:::o;1376:1345::-;1496:10;;-1:-1:-1;;;;;1518:30:29;;1515:56;;;1551:18;;:::i;:::-;1580:97;1670:6;1630:38;1662:4;1656:11;1630:38;:::i;:::-;1624:4;1580:97;:::i;:::-;1732:4;;1789:2;1778:14;;1806:1;1801:663;;;;2508:1;2525:6;2522:89;;;-1:-1:-1;2577:19:29;;;2571:26;2522:89;-1:-1:-1;;1333:1:29;1329:11;;;1325:24;1321:29;1311:40;1357:1;1353:11;;;1308:57;2624:81;;1771:944;;1801:663;604:1;597:14;;;641:4;628:18;;-1:-1:-1;;1837:20:29;;;1955:236;1969:7;1966:1;1963:14;1955:236;;;2058:19;;;2052:26;2037:42;;2150:27;;;;2118:1;2106:14;;;;1985:19;;1955:236;;;1959:3;2219:6;2210:7;2207:19;2204:201;;;2280:19;;;2274:26;-1:-1:-1;;2363:1:29;2359:14;;;2375:3;2355:24;2351:37;2347:42;2332:58;2317:74;;2204:201;-1:-1:-1;;;;;2451:1:29;2435:14;;;2431:22;2418:36;;-1:-1:-1;1376:1345:29:o;2934:222::-;2999:9;;;3020:10;;;3017:133;;;3072:10;3067:3;3063:20;3060:1;3053:31;3107:4;3104:1;3097:15;3135:4;3132:1;3125:15;3017:133;2934:222;;;;:::o;3511:177::-;115:255:28;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@_approve_2111": {
              "entryPoint": 631,
              "id": 2111,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_approve_2171": {
              "entryPoint": 876,
              "id": 2171,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@_msgSender_3060": {
              "entryPoint": null,
              "id": 3060,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_spendAllowance_2219": {
              "entryPoint": 649,
              "id": 2219,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_transfer_1950": {
              "entryPoint": 781,
              "id": 1950,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_update_2027": {
              "entryPoint": 1089,
              "id": 2027,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@allowance_1847": {
              "entryPoint": null,
              "id": 1847,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@approve_1871": {
              "entryPoint": 540,
              "id": 1871,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@balanceOf_1806": {
              "entryPoint": null,
              "id": 1806,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@decimals_1784": {
              "entryPoint": null,
              "id": 1784,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@name_1766": {
              "entryPoint": 394,
              "id": 1766,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@symbol_1775": {
              "entryPoint": 602,
              "id": 1775,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@totalSupply_1793": {
              "entryPoint": null,
              "id": 1793,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@transferFrom_1903": {
              "entryPoint": 566,
              "id": 1903,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@transfer_1830": {
              "entryPoint": 617,
              "id": 1830,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_address": {
              "entryPoint": 1466,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address": {
              "entryPoint": 1596,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_addresst_address": {
              "entryPoint": 1630,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_addresst_uint256": {
              "entryPoint": 1536,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_addresst_uint256": {
              "entryPoint": 1494,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 1387,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_add_t_uint256": {
              "entryPoint": 1739,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "extract_byte_array_length": {
              "entryPoint": 1681,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nativeSrc": "0:3523:29",
                "nodeType": "YulBlock",
                "src": "0:3523:29",
                "statements": [
                  {
                    "nativeSrc": "6:3:29",
                    "nodeType": "YulBlock",
                    "src": "6:3:29",
                    "statements": []
                  },
                  {
                    "body": {
                      "nativeSrc": "135:427:29",
                      "nodeType": "YulBlock",
                      "src": "135:427:29",
                      "statements": [
                        {
                          "nativeSrc": "145:12:29",
                          "nodeType": "YulVariableDeclaration",
                          "src": "145:12:29",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "155:2:29",
                            "nodeType": "YulLiteral",
                            "src": "155:2:29",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nativeSrc": "149:2:29",
                              "nodeType": "YulTypedName",
                              "src": "149:2:29",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "173:9:29",
                                "nodeType": "YulIdentifier",
                                "src": "173:9:29"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "184:2:29",
                                "nodeType": "YulLiteral",
                                "src": "184:2:29",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "166:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "166:6:29"
                            },
                            "nativeSrc": "166:21:29",
                            "nodeType": "YulFunctionCall",
                            "src": "166:21:29"
                          },
                          "nativeSrc": "166:21:29",
                          "nodeType": "YulExpressionStatement",
                          "src": "166:21:29"
                        },
                        {
                          "nativeSrc": "196:27:29",
                          "nodeType": "YulVariableDeclaration",
                          "src": "196:27:29",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "216:6:29",
                                "nodeType": "YulIdentifier",
                                "src": "216:6:29"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "210:5:29",
                              "nodeType": "YulIdentifier",
                              "src": "210:5:29"
                            },
                            "nativeSrc": "210:13:29",
                            "nodeType": "YulFunctionCall",
                            "src": "210:13:29"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nativeSrc": "200:6:29",
                              "nodeType": "YulTypedName",
                              "src": "200:6:29",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "243:9:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "243:9:29"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "254:2:29",
                                    "nodeType": "YulLiteral",
                                    "src": "254:2:29",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "239:3:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "239:3:29"
                                },
                                "nativeSrc": "239:18:29",
                                "nodeType": "YulFunctionCall",
                                "src": "239:18:29"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "259:6:29",
                                "nodeType": "YulIdentifier",
                                "src": "259:6:29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "232:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "232:6:29"
                            },
                            "nativeSrc": "232:34:29",
                            "nodeType": "YulFunctionCall",
                            "src": "232:34:29"
                          },
                          "nativeSrc": "232:34:29",
                          "nodeType": "YulExpressionStatement",
                          "src": "232:34:29"
                        },
                        {
                          "nativeSrc": "275:10:29",
                          "nodeType": "YulVariableDeclaration",
                          "src": "275:10:29",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "284:1:29",
                            "nodeType": "YulLiteral",
                            "src": "284:1:29",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nativeSrc": "279:1:29",
                              "nodeType": "YulTypedName",
                              "src": "279:1:29",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "344:90:29",
                            "nodeType": "YulBlock",
                            "src": "344:90:29",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "headStart",
                                              "nativeSrc": "373:9:29",
                                              "nodeType": "YulIdentifier",
                                              "src": "373:9:29"
                                            },
                                            {
                                              "name": "i",
                                              "nativeSrc": "384:1:29",
                                              "nodeType": "YulIdentifier",
                                              "src": "384:1:29"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "369:3:29",
                                            "nodeType": "YulIdentifier",
                                            "src": "369:3:29"
                                          },
                                          "nativeSrc": "369:17:29",
                                          "nodeType": "YulFunctionCall",
                                          "src": "369:17:29"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "388:2:29",
                                          "nodeType": "YulLiteral",
                                          "src": "388:2:29",
                                          "type": "",
                                          "value": "64"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nativeSrc": "365:3:29",
                                        "nodeType": "YulIdentifier",
                                        "src": "365:3:29"
                                      },
                                      "nativeSrc": "365:26:29",
                                      "nodeType": "YulFunctionCall",
                                      "src": "365:26:29"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "value0",
                                                  "nativeSrc": "407:6:29",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "407:6:29"
                                                },
                                                {
                                                  "name": "i",
                                                  "nativeSrc": "415:1:29",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "415:1:29"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nativeSrc": "403:3:29",
                                                "nodeType": "YulIdentifier",
                                                "src": "403:3:29"
                                              },
                                              "nativeSrc": "403:14:29",
                                              "nodeType": "YulFunctionCall",
                                              "src": "403:14:29"
                                            },
                                            {
                                              "name": "_1",
                                              "nativeSrc": "419:2:29",
                                              "nodeType": "YulIdentifier",
                                              "src": "419:2:29"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "399:3:29",
                                            "nodeType": "YulIdentifier",
                                            "src": "399:3:29"
                                          },
                                          "nativeSrc": "399:23:29",
                                          "nodeType": "YulFunctionCall",
                                          "src": "399:23:29"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nativeSrc": "393:5:29",
                                        "nodeType": "YulIdentifier",
                                        "src": "393:5:29"
                                      },
                                      "nativeSrc": "393:30:29",
                                      "nodeType": "YulFunctionCall",
                                      "src": "393:30:29"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "358:6:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "358:6:29"
                                  },
                                  "nativeSrc": "358:66:29",
                                  "nodeType": "YulFunctionCall",
                                  "src": "358:66:29"
                                },
                                "nativeSrc": "358:66:29",
                                "nodeType": "YulExpressionStatement",
                                "src": "358:66:29"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nativeSrc": "305:1:29",
                                "nodeType": "YulIdentifier",
                                "src": "305:1:29"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "308:6:29",
                                "nodeType": "YulIdentifier",
                                "src": "308:6:29"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nativeSrc": "302:2:29",
                              "nodeType": "YulIdentifier",
                              "src": "302:2:29"
                            },
                            "nativeSrc": "302:13:29",
                            "nodeType": "YulFunctionCall",
                            "src": "302:13:29"
                          },
                          "nativeSrc": "294:140:29",
                          "nodeType": "YulForLoop",
                          "post": {
                            "nativeSrc": "316:19:29",
                            "nodeType": "YulBlock",
                            "src": "316:19:29",
                            "statements": [
                              {
                                "nativeSrc": "318:15:29",
                                "nodeType": "YulAssignment",
                                "src": "318:15:29",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nativeSrc": "327:1:29",
                                      "nodeType": "YulIdentifier",
                                      "src": "327:1:29"
                                    },
                                    {
                                      "name": "_1",
                                      "nativeSrc": "330:2:29",
                                      "nodeType": "YulIdentifier",
                                      "src": "330:2:29"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "323:3:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "323:3:29"
                                  },
                                  "nativeSrc": "323:10:29",
                                  "nodeType": "YulFunctionCall",
                                  "src": "323:10:29"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nativeSrc": "318:1:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "318:1:29"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nativeSrc": "298:3:29",
                            "nodeType": "YulBlock",
                            "src": "298:3:29",
                            "statements": []
                          },
                          "src": "294:140:29"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "458:9:29",
                                        "nodeType": "YulIdentifier",
                                        "src": "458:9:29"
                                      },
                                      {
                                        "name": "length",
                                        "nativeSrc": "469:6:29",
                                        "nodeType": "YulIdentifier",
                                        "src": "469:6:29"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "454:3:29",
                                      "nodeType": "YulIdentifier",
                                      "src": "454:3:29"
                                    },
                                    "nativeSrc": "454:22:29",
                                    "nodeType": "YulFunctionCall",
                                    "src": "454:22:29"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "478:2:29",
                                    "nodeType": "YulLiteral",
                                    "src": "478:2:29",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "450:3:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "450:3:29"
                                },
                                "nativeSrc": "450:31:29",
                                "nodeType": "YulFunctionCall",
                                "src": "450:31:29"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "483:1:29",
                                "nodeType": "YulLiteral",
                                "src": "483:1:29",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "443:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "443:6:29"
                            },
                            "nativeSrc": "443:42:29",
                            "nodeType": "YulFunctionCall",
                            "src": "443:42:29"
                          },
                          "nativeSrc": "443:42:29",
                          "nodeType": "YulExpressionStatement",
                          "src": "443:42:29"
                        },
                        {
                          "nativeSrc": "494:62:29",
                          "nodeType": "YulAssignment",
                          "src": "494:62:29",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "510:9:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "510:9:29"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nativeSrc": "529:6:29",
                                            "nodeType": "YulIdentifier",
                                            "src": "529:6:29"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "537:2:29",
                                            "nodeType": "YulLiteral",
                                            "src": "537:2:29",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "525:3:29",
                                          "nodeType": "YulIdentifier",
                                          "src": "525:3:29"
                                        },
                                        "nativeSrc": "525:15:29",
                                        "nodeType": "YulFunctionCall",
                                        "src": "525:15:29"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nativeSrc": "546:2:29",
                                            "nodeType": "YulLiteral",
                                            "src": "546:2:29",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nativeSrc": "542:3:29",
                                          "nodeType": "YulIdentifier",
                                          "src": "542:3:29"
                                        },
                                        "nativeSrc": "542:7:29",
                                        "nodeType": "YulFunctionCall",
                                        "src": "542:7:29"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "521:3:29",
                                      "nodeType": "YulIdentifier",
                                      "src": "521:3:29"
                                    },
                                    "nativeSrc": "521:29:29",
                                    "nodeType": "YulFunctionCall",
                                    "src": "521:29:29"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "506:3:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "506:3:29"
                                },
                                "nativeSrc": "506:45:29",
                                "nodeType": "YulFunctionCall",
                                "src": "506:45:29"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "553:2:29",
                                "nodeType": "YulLiteral",
                                "src": "553:2:29",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "502:3:29",
                              "nodeType": "YulIdentifier",
                              "src": "502:3:29"
                            },
                            "nativeSrc": "502:54:29",
                            "nodeType": "YulFunctionCall",
                            "src": "502:54:29"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "494:4:29",
                              "nodeType": "YulIdentifier",
                              "src": "494:4:29"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nativeSrc": "14:548:29",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "104:9:29",
                        "nodeType": "YulTypedName",
                        "src": "104:9:29",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "115:6:29",
                        "nodeType": "YulTypedName",
                        "src": "115:6:29",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "126:4:29",
                        "nodeType": "YulTypedName",
                        "src": "126:4:29",
                        "type": ""
                      }
                    ],
                    "src": "14:548:29"
                  },
                  {
                    "body": {
                      "nativeSrc": "616:124:29",
                      "nodeType": "YulBlock",
                      "src": "616:124:29",
                      "statements": [
                        {
                          "nativeSrc": "626:29:29",
                          "nodeType": "YulAssignment",
                          "src": "626:29:29",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "648:6:29",
                                "nodeType": "YulIdentifier",
                                "src": "648:6:29"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "635:12:29",
                              "nodeType": "YulIdentifier",
                              "src": "635:12:29"
                            },
                            "nativeSrc": "635:20:29",
                            "nodeType": "YulFunctionCall",
                            "src": "635:20:29"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "626:5:29",
                              "nodeType": "YulIdentifier",
                              "src": "626:5:29"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "718:16:29",
                            "nodeType": "YulBlock",
                            "src": "718:16:29",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "727:1:29",
                                      "nodeType": "YulLiteral",
                                      "src": "727:1:29",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "730:1:29",
                                      "nodeType": "YulLiteral",
                                      "src": "730:1:29",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "720:6:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "720:6:29"
                                  },
                                  "nativeSrc": "720:12:29",
                                  "nodeType": "YulFunctionCall",
                                  "src": "720:12:29"
                                },
                                "nativeSrc": "720:12:29",
                                "nodeType": "YulExpressionStatement",
                                "src": "720:12:29"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "677:5:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "677:5:29"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "688:5:29",
                                        "nodeType": "YulIdentifier",
                                        "src": "688:5:29"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nativeSrc": "703:3:29",
                                                "nodeType": "YulLiteral",
                                                "src": "703:3:29",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "708:1:29",
                                                "nodeType": "YulLiteral",
                                                "src": "708:1:29",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nativeSrc": "699:3:29",
                                              "nodeType": "YulIdentifier",
                                              "src": "699:3:29"
                                            },
                                            "nativeSrc": "699:11:29",
                                            "nodeType": "YulFunctionCall",
                                            "src": "699:11:29"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "712:1:29",
                                            "nodeType": "YulLiteral",
                                            "src": "712:1:29",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nativeSrc": "695:3:29",
                                          "nodeType": "YulIdentifier",
                                          "src": "695:3:29"
                                        },
                                        "nativeSrc": "695:19:29",
                                        "nodeType": "YulFunctionCall",
                                        "src": "695:19:29"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "684:3:29",
                                      "nodeType": "YulIdentifier",
                                      "src": "684:3:29"
                                    },
                                    "nativeSrc": "684:31:29",
                                    "nodeType": "YulFunctionCall",
                                    "src": "684:31:29"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "674:2:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "674:2:29"
                                },
                                "nativeSrc": "674:42:29",
                                "nodeType": "YulFunctionCall",
                                "src": "674:42:29"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "667:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "667:6:29"
                            },
                            "nativeSrc": "667:50:29",
                            "nodeType": "YulFunctionCall",
                            "src": "667:50:29"
                          },
                          "nativeSrc": "664:70:29",
                          "nodeType": "YulIf",
                          "src": "664:70:29"
                        }
                      ]
                    },
                    "name": "abi_decode_address",
                    "nativeSrc": "567:173:29",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "595:6:29",
                        "nodeType": "YulTypedName",
                        "src": "595:6:29",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nativeSrc": "606:5:29",
                        "nodeType": "YulTypedName",
                        "src": "606:5:29",
                        "type": ""
                      }
                    ],
                    "src": "567:173:29"
                  },
                  {
                    "body": {
                      "nativeSrc": "832:167:29",
                      "nodeType": "YulBlock",
                      "src": "832:167:29",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "878:16:29",
                            "nodeType": "YulBlock",
                            "src": "878:16:29",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "887:1:29",
                                      "nodeType": "YulLiteral",
                                      "src": "887:1:29",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "890:1:29",
                                      "nodeType": "YulLiteral",
                                      "src": "890:1:29",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "880:6:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "880:6:29"
                                  },
                                  "nativeSrc": "880:12:29",
                                  "nodeType": "YulFunctionCall",
                                  "src": "880:12:29"
                                },
                                "nativeSrc": "880:12:29",
                                "nodeType": "YulExpressionStatement",
                                "src": "880:12:29"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "853:7:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "853:7:29"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "862:9:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "862:9:29"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "849:3:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "849:3:29"
                                },
                                "nativeSrc": "849:23:29",
                                "nodeType": "YulFunctionCall",
                                "src": "849:23:29"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "874:2:29",
                                "nodeType": "YulLiteral",
                                "src": "874:2:29",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "845:3:29",
                              "nodeType": "YulIdentifier",
                              "src": "845:3:29"
                            },
                            "nativeSrc": "845:32:29",
                            "nodeType": "YulFunctionCall",
                            "src": "845:32:29"
                          },
                          "nativeSrc": "842:52:29",
                          "nodeType": "YulIf",
                          "src": "842:52:29"
                        },
                        {
                          "nativeSrc": "903:39:29",
                          "nodeType": "YulAssignment",
                          "src": "903:39:29",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "932:9:29",
                                "nodeType": "YulIdentifier",
                                "src": "932:9:29"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nativeSrc": "913:18:29",
                              "nodeType": "YulIdentifier",
                              "src": "913:18:29"
                            },
                            "nativeSrc": "913:29:29",
                            "nodeType": "YulFunctionCall",
                            "src": "913:29:29"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nativeSrc": "903:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "903:6:29"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "951:42:29",
                          "nodeType": "YulAssignment",
                          "src": "951:42:29",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "978:9:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "978:9:29"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "989:2:29",
                                    "nodeType": "YulLiteral",
                                    "src": "989:2:29",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "974:3:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "974:3:29"
                                },
                                "nativeSrc": "974:18:29",
                                "nodeType": "YulFunctionCall",
                                "src": "974:18:29"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "961:12:29",
                              "nodeType": "YulIdentifier",
                              "src": "961:12:29"
                            },
                            "nativeSrc": "961:32:29",
                            "nodeType": "YulFunctionCall",
                            "src": "961:32:29"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nativeSrc": "951:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "951:6:29"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256",
                    "nativeSrc": "745:254:29",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "790:9:29",
                        "nodeType": "YulTypedName",
                        "src": "790:9:29",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "801:7:29",
                        "nodeType": "YulTypedName",
                        "src": "801:7:29",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "813:6:29",
                        "nodeType": "YulTypedName",
                        "src": "813:6:29",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "821:6:29",
                        "nodeType": "YulTypedName",
                        "src": "821:6:29",
                        "type": ""
                      }
                    ],
                    "src": "745:254:29"
                  },
                  {
                    "body": {
                      "nativeSrc": "1099:92:29",
                      "nodeType": "YulBlock",
                      "src": "1099:92:29",
                      "statements": [
                        {
                          "nativeSrc": "1109:26:29",
                          "nodeType": "YulAssignment",
                          "src": "1109:26:29",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "1121:9:29",
                                "nodeType": "YulIdentifier",
                                "src": "1121:9:29"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1132:2:29",
                                "nodeType": "YulLiteral",
                                "src": "1132:2:29",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "1117:3:29",
                              "nodeType": "YulIdentifier",
                              "src": "1117:3:29"
                            },
                            "nativeSrc": "1117:18:29",
                            "nodeType": "YulFunctionCall",
                            "src": "1117:18:29"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "1109:4:29",
                              "nodeType": "YulIdentifier",
                              "src": "1109:4:29"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "1151:9:29",
                                "nodeType": "YulIdentifier",
                                "src": "1151:9:29"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "1176:6:29",
                                        "nodeType": "YulIdentifier",
                                        "src": "1176:6:29"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nativeSrc": "1169:6:29",
                                      "nodeType": "YulIdentifier",
                                      "src": "1169:6:29"
                                    },
                                    "nativeSrc": "1169:14:29",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1169:14:29"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nativeSrc": "1162:6:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "1162:6:29"
                                },
                                "nativeSrc": "1162:22:29",
                                "nodeType": "YulFunctionCall",
                                "src": "1162:22:29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "1144:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "1144:6:29"
                            },
                            "nativeSrc": "1144:41:29",
                            "nodeType": "YulFunctionCall",
                            "src": "1144:41:29"
                          },
                          "nativeSrc": "1144:41:29",
                          "nodeType": "YulExpressionStatement",
                          "src": "1144:41:29"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nativeSrc": "1004:187:29",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "1068:9:29",
                        "nodeType": "YulTypedName",
                        "src": "1068:9:29",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "1079:6:29",
                        "nodeType": "YulTypedName",
                        "src": "1079:6:29",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "1090:4:29",
                        "nodeType": "YulTypedName",
                        "src": "1090:4:29",
                        "type": ""
                      }
                    ],
                    "src": "1004:187:29"
                  },
                  {
                    "body": {
                      "nativeSrc": "1297:76:29",
                      "nodeType": "YulBlock",
                      "src": "1297:76:29",
                      "statements": [
                        {
                          "nativeSrc": "1307:26:29",
                          "nodeType": "YulAssignment",
                          "src": "1307:26:29",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "1319:9:29",
                                "nodeType": "YulIdentifier",
                                "src": "1319:9:29"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1330:2:29",
                                "nodeType": "YulLiteral",
                                "src": "1330:2:29",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "1315:3:29",
                              "nodeType": "YulIdentifier",
                              "src": "1315:3:29"
                            },
                            "nativeSrc": "1315:18:29",
                            "nodeType": "YulFunctionCall",
                            "src": "1315:18:29"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "1307:4:29",
                              "nodeType": "YulIdentifier",
                              "src": "1307:4:29"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "1349:9:29",
                                "nodeType": "YulIdentifier",
                                "src": "1349:9:29"
                              },
                              {
                                "name": "value0",
                                "nativeSrc": "1360:6:29",
                                "nodeType": "YulIdentifier",
                                "src": "1360:6:29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "1342:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "1342:6:29"
                            },
                            "nativeSrc": "1342:25:29",
                            "nodeType": "YulFunctionCall",
                            "src": "1342:25:29"
                          },
                          "nativeSrc": "1342:25:29",
                          "nodeType": "YulExpressionStatement",
                          "src": "1342:25:29"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nativeSrc": "1196:177:29",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "1266:9:29",
                        "nodeType": "YulTypedName",
                        "src": "1266:9:29",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "1277:6:29",
                        "nodeType": "YulTypedName",
                        "src": "1277:6:29",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "1288:4:29",
                        "nodeType": "YulTypedName",
                        "src": "1288:4:29",
                        "type": ""
                      }
                    ],
                    "src": "1196:177:29"
                  },
                  {
                    "body": {
                      "nativeSrc": "1482:224:29",
                      "nodeType": "YulBlock",
                      "src": "1482:224:29",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "1528:16:29",
                            "nodeType": "YulBlock",
                            "src": "1528:16:29",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1537:1:29",
                                      "nodeType": "YulLiteral",
                                      "src": "1537:1:29",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1540:1:29",
                                      "nodeType": "YulLiteral",
                                      "src": "1540:1:29",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "1530:6:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "1530:6:29"
                                  },
                                  "nativeSrc": "1530:12:29",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1530:12:29"
                                },
                                "nativeSrc": "1530:12:29",
                                "nodeType": "YulExpressionStatement",
                                "src": "1530:12:29"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "1503:7:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "1503:7:29"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1512:9:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "1512:9:29"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "1499:3:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "1499:3:29"
                                },
                                "nativeSrc": "1499:23:29",
                                "nodeType": "YulFunctionCall",
                                "src": "1499:23:29"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1524:2:29",
                                "nodeType": "YulLiteral",
                                "src": "1524:2:29",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "1495:3:29",
                              "nodeType": "YulIdentifier",
                              "src": "1495:3:29"
                            },
                            "nativeSrc": "1495:32:29",
                            "nodeType": "YulFunctionCall",
                            "src": "1495:32:29"
                          },
                          "nativeSrc": "1492:52:29",
                          "nodeType": "YulIf",
                          "src": "1492:52:29"
                        },
                        {
                          "nativeSrc": "1553:39:29",
                          "nodeType": "YulAssignment",
                          "src": "1553:39:29",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "1582:9:29",
                                "nodeType": "YulIdentifier",
                                "src": "1582:9:29"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nativeSrc": "1563:18:29",
                              "nodeType": "YulIdentifier",
                              "src": "1563:18:29"
                            },
                            "nativeSrc": "1563:29:29",
                            "nodeType": "YulFunctionCall",
                            "src": "1563:29:29"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nativeSrc": "1553:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "1553:6:29"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1601:48:29",
                          "nodeType": "YulAssignment",
                          "src": "1601:48:29",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1634:9:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "1634:9:29"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1645:2:29",
                                    "nodeType": "YulLiteral",
                                    "src": "1645:2:29",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "1630:3:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "1630:3:29"
                                },
                                "nativeSrc": "1630:18:29",
                                "nodeType": "YulFunctionCall",
                                "src": "1630:18:29"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nativeSrc": "1611:18:29",
                              "nodeType": "YulIdentifier",
                              "src": "1611:18:29"
                            },
                            "nativeSrc": "1611:38:29",
                            "nodeType": "YulFunctionCall",
                            "src": "1611:38:29"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nativeSrc": "1601:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "1601:6:29"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1658:42:29",
                          "nodeType": "YulAssignment",
                          "src": "1658:42:29",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1685:9:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "1685:9:29"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1696:2:29",
                                    "nodeType": "YulLiteral",
                                    "src": "1696:2:29",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "1681:3:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "1681:3:29"
                                },
                                "nativeSrc": "1681:18:29",
                                "nodeType": "YulFunctionCall",
                                "src": "1681:18:29"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "1668:12:29",
                              "nodeType": "YulIdentifier",
                              "src": "1668:12:29"
                            },
                            "nativeSrc": "1668:32:29",
                            "nodeType": "YulFunctionCall",
                            "src": "1668:32:29"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nativeSrc": "1658:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "1658:6:29"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256",
                    "nativeSrc": "1378:328:29",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "1432:9:29",
                        "nodeType": "YulTypedName",
                        "src": "1432:9:29",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "1443:7:29",
                        "nodeType": "YulTypedName",
                        "src": "1443:7:29",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "1455:6:29",
                        "nodeType": "YulTypedName",
                        "src": "1455:6:29",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "1463:6:29",
                        "nodeType": "YulTypedName",
                        "src": "1463:6:29",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nativeSrc": "1471:6:29",
                        "nodeType": "YulTypedName",
                        "src": "1471:6:29",
                        "type": ""
                      }
                    ],
                    "src": "1378:328:29"
                  },
                  {
                    "body": {
                      "nativeSrc": "1808:87:29",
                      "nodeType": "YulBlock",
                      "src": "1808:87:29",
                      "statements": [
                        {
                          "nativeSrc": "1818:26:29",
                          "nodeType": "YulAssignment",
                          "src": "1818:26:29",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "1830:9:29",
                                "nodeType": "YulIdentifier",
                                "src": "1830:9:29"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1841:2:29",
                                "nodeType": "YulLiteral",
                                "src": "1841:2:29",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "1826:3:29",
                              "nodeType": "YulIdentifier",
                              "src": "1826:3:29"
                            },
                            "nativeSrc": "1826:18:29",
                            "nodeType": "YulFunctionCall",
                            "src": "1826:18:29"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "1818:4:29",
                              "nodeType": "YulIdentifier",
                              "src": "1818:4:29"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "1860:9:29",
                                "nodeType": "YulIdentifier",
                                "src": "1860:9:29"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "1875:6:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "1875:6:29"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1883:4:29",
                                    "nodeType": "YulLiteral",
                                    "src": "1883:4:29",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "1871:3:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "1871:3:29"
                                },
                                "nativeSrc": "1871:17:29",
                                "nodeType": "YulFunctionCall",
                                "src": "1871:17:29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "1853:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "1853:6:29"
                            },
                            "nativeSrc": "1853:36:29",
                            "nodeType": "YulFunctionCall",
                            "src": "1853:36:29"
                          },
                          "nativeSrc": "1853:36:29",
                          "nodeType": "YulExpressionStatement",
                          "src": "1853:36:29"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
                    "nativeSrc": "1711:184:29",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "1777:9:29",
                        "nodeType": "YulTypedName",
                        "src": "1777:9:29",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "1788:6:29",
                        "nodeType": "YulTypedName",
                        "src": "1788:6:29",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "1799:4:29",
                        "nodeType": "YulTypedName",
                        "src": "1799:4:29",
                        "type": ""
                      }
                    ],
                    "src": "1711:184:29"
                  },
                  {
                    "body": {
                      "nativeSrc": "1970:116:29",
                      "nodeType": "YulBlock",
                      "src": "1970:116:29",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "2016:16:29",
                            "nodeType": "YulBlock",
                            "src": "2016:16:29",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2025:1:29",
                                      "nodeType": "YulLiteral",
                                      "src": "2025:1:29",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2028:1:29",
                                      "nodeType": "YulLiteral",
                                      "src": "2028:1:29",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "2018:6:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "2018:6:29"
                                  },
                                  "nativeSrc": "2018:12:29",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2018:12:29"
                                },
                                "nativeSrc": "2018:12:29",
                                "nodeType": "YulExpressionStatement",
                                "src": "2018:12:29"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "1991:7:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "1991:7:29"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2000:9:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "2000:9:29"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "1987:3:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "1987:3:29"
                                },
                                "nativeSrc": "1987:23:29",
                                "nodeType": "YulFunctionCall",
                                "src": "1987:23:29"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2012:2:29",
                                "nodeType": "YulLiteral",
                                "src": "2012:2:29",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "1983:3:29",
                              "nodeType": "YulIdentifier",
                              "src": "1983:3:29"
                            },
                            "nativeSrc": "1983:32:29",
                            "nodeType": "YulFunctionCall",
                            "src": "1983:32:29"
                          },
                          "nativeSrc": "1980:52:29",
                          "nodeType": "YulIf",
                          "src": "1980:52:29"
                        },
                        {
                          "nativeSrc": "2041:39:29",
                          "nodeType": "YulAssignment",
                          "src": "2041:39:29",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "2070:9:29",
                                "nodeType": "YulIdentifier",
                                "src": "2070:9:29"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nativeSrc": "2051:18:29",
                              "nodeType": "YulIdentifier",
                              "src": "2051:18:29"
                            },
                            "nativeSrc": "2051:29:29",
                            "nodeType": "YulFunctionCall",
                            "src": "2051:29:29"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nativeSrc": "2041:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "2041:6:29"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nativeSrc": "1900:186:29",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "1936:9:29",
                        "nodeType": "YulTypedName",
                        "src": "1936:9:29",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "1947:7:29",
                        "nodeType": "YulTypedName",
                        "src": "1947:7:29",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "1959:6:29",
                        "nodeType": "YulTypedName",
                        "src": "1959:6:29",
                        "type": ""
                      }
                    ],
                    "src": "1900:186:29"
                  },
                  {
                    "body": {
                      "nativeSrc": "2178:173:29",
                      "nodeType": "YulBlock",
                      "src": "2178:173:29",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "2224:16:29",
                            "nodeType": "YulBlock",
                            "src": "2224:16:29",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2233:1:29",
                                      "nodeType": "YulLiteral",
                                      "src": "2233:1:29",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2236:1:29",
                                      "nodeType": "YulLiteral",
                                      "src": "2236:1:29",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "2226:6:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "2226:6:29"
                                  },
                                  "nativeSrc": "2226:12:29",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2226:12:29"
                                },
                                "nativeSrc": "2226:12:29",
                                "nodeType": "YulExpressionStatement",
                                "src": "2226:12:29"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "2199:7:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "2199:7:29"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2208:9:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "2208:9:29"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "2195:3:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "2195:3:29"
                                },
                                "nativeSrc": "2195:23:29",
                                "nodeType": "YulFunctionCall",
                                "src": "2195:23:29"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2220:2:29",
                                "nodeType": "YulLiteral",
                                "src": "2220:2:29",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "2191:3:29",
                              "nodeType": "YulIdentifier",
                              "src": "2191:3:29"
                            },
                            "nativeSrc": "2191:32:29",
                            "nodeType": "YulFunctionCall",
                            "src": "2191:32:29"
                          },
                          "nativeSrc": "2188:52:29",
                          "nodeType": "YulIf",
                          "src": "2188:52:29"
                        },
                        {
                          "nativeSrc": "2249:39:29",
                          "nodeType": "YulAssignment",
                          "src": "2249:39:29",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "2278:9:29",
                                "nodeType": "YulIdentifier",
                                "src": "2278:9:29"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nativeSrc": "2259:18:29",
                              "nodeType": "YulIdentifier",
                              "src": "2259:18:29"
                            },
                            "nativeSrc": "2259:29:29",
                            "nodeType": "YulFunctionCall",
                            "src": "2259:29:29"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nativeSrc": "2249:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "2249:6:29"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "2297:48:29",
                          "nodeType": "YulAssignment",
                          "src": "2297:48:29",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2330:9:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "2330:9:29"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2341:2:29",
                                    "nodeType": "YulLiteral",
                                    "src": "2341:2:29",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2326:3:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "2326:3:29"
                                },
                                "nativeSrc": "2326:18:29",
                                "nodeType": "YulFunctionCall",
                                "src": "2326:18:29"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nativeSrc": "2307:18:29",
                              "nodeType": "YulIdentifier",
                              "src": "2307:18:29"
                            },
                            "nativeSrc": "2307:38:29",
                            "nodeType": "YulFunctionCall",
                            "src": "2307:38:29"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nativeSrc": "2297:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "2297:6:29"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_address",
                    "nativeSrc": "2091:260:29",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "2136:9:29",
                        "nodeType": "YulTypedName",
                        "src": "2136:9:29",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "2147:7:29",
                        "nodeType": "YulTypedName",
                        "src": "2147:7:29",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "2159:6:29",
                        "nodeType": "YulTypedName",
                        "src": "2159:6:29",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "2167:6:29",
                        "nodeType": "YulTypedName",
                        "src": "2167:6:29",
                        "type": ""
                      }
                    ],
                    "src": "2091:260:29"
                  },
                  {
                    "body": {
                      "nativeSrc": "2411:325:29",
                      "nodeType": "YulBlock",
                      "src": "2411:325:29",
                      "statements": [
                        {
                          "nativeSrc": "2421:22:29",
                          "nodeType": "YulAssignment",
                          "src": "2421:22:29",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "2435:1:29",
                                "nodeType": "YulLiteral",
                                "src": "2435:1:29",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nativeSrc": "2438:4:29",
                                "nodeType": "YulIdentifier",
                                "src": "2438:4:29"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nativeSrc": "2431:3:29",
                              "nodeType": "YulIdentifier",
                              "src": "2431:3:29"
                            },
                            "nativeSrc": "2431:12:29",
                            "nodeType": "YulFunctionCall",
                            "src": "2431:12:29"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nativeSrc": "2421:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "2421:6:29"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "2452:38:29",
                          "nodeType": "YulVariableDeclaration",
                          "src": "2452:38:29",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nativeSrc": "2482:4:29",
                                "nodeType": "YulIdentifier",
                                "src": "2482:4:29"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2488:1:29",
                                "nodeType": "YulLiteral",
                                "src": "2488:1:29",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "2478:3:29",
                              "nodeType": "YulIdentifier",
                              "src": "2478:3:29"
                            },
                            "nativeSrc": "2478:12:29",
                            "nodeType": "YulFunctionCall",
                            "src": "2478:12:29"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nativeSrc": "2456:18:29",
                              "nodeType": "YulTypedName",
                              "src": "2456:18:29",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "2529:31:29",
                            "nodeType": "YulBlock",
                            "src": "2529:31:29",
                            "statements": [
                              {
                                "nativeSrc": "2531:27:29",
                                "nodeType": "YulAssignment",
                                "src": "2531:27:29",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nativeSrc": "2545:6:29",
                                      "nodeType": "YulIdentifier",
                                      "src": "2545:6:29"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2553:4:29",
                                      "nodeType": "YulLiteral",
                                      "src": "2553:4:29",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nativeSrc": "2541:3:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "2541:3:29"
                                  },
                                  "nativeSrc": "2541:17:29",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2541:17:29"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "2531:6:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "2531:6:29"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nativeSrc": "2509:18:29",
                                "nodeType": "YulIdentifier",
                                "src": "2509:18:29"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "2502:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "2502:6:29"
                            },
                            "nativeSrc": "2502:26:29",
                            "nodeType": "YulFunctionCall",
                            "src": "2502:26:29"
                          },
                          "nativeSrc": "2499:61:29",
                          "nodeType": "YulIf",
                          "src": "2499:61:29"
                        },
                        {
                          "body": {
                            "nativeSrc": "2619:111:29",
                            "nodeType": "YulBlock",
                            "src": "2619:111:29",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2640:1:29",
                                      "nodeType": "YulLiteral",
                                      "src": "2640:1:29",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "2647:3:29",
                                          "nodeType": "YulLiteral",
                                          "src": "2647:3:29",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "2652:10:29",
                                          "nodeType": "YulLiteral",
                                          "src": "2652:10:29",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nativeSrc": "2643:3:29",
                                        "nodeType": "YulIdentifier",
                                        "src": "2643:3:29"
                                      },
                                      "nativeSrc": "2643:20:29",
                                      "nodeType": "YulFunctionCall",
                                      "src": "2643:20:29"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "2633:6:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "2633:6:29"
                                  },
                                  "nativeSrc": "2633:31:29",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2633:31:29"
                                },
                                "nativeSrc": "2633:31:29",
                                "nodeType": "YulExpressionStatement",
                                "src": "2633:31:29"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2684:1:29",
                                      "nodeType": "YulLiteral",
                                      "src": "2684:1:29",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2687:4:29",
                                      "nodeType": "YulLiteral",
                                      "src": "2687:4:29",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "2677:6:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "2677:6:29"
                                  },
                                  "nativeSrc": "2677:15:29",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2677:15:29"
                                },
                                "nativeSrc": "2677:15:29",
                                "nodeType": "YulExpressionStatement",
                                "src": "2677:15:29"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2712:1:29",
                                      "nodeType": "YulLiteral",
                                      "src": "2712:1:29",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2715:4:29",
                                      "nodeType": "YulLiteral",
                                      "src": "2715:4:29",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "2705:6:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "2705:6:29"
                                  },
                                  "nativeSrc": "2705:15:29",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2705:15:29"
                                },
                                "nativeSrc": "2705:15:29",
                                "nodeType": "YulExpressionStatement",
                                "src": "2705:15:29"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nativeSrc": "2575:18:29",
                                "nodeType": "YulIdentifier",
                                "src": "2575:18:29"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "2598:6:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "2598:6:29"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2606:2:29",
                                    "nodeType": "YulLiteral",
                                    "src": "2606:2:29",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nativeSrc": "2595:2:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "2595:2:29"
                                },
                                "nativeSrc": "2595:14:29",
                                "nodeType": "YulFunctionCall",
                                "src": "2595:14:29"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nativeSrc": "2572:2:29",
                              "nodeType": "YulIdentifier",
                              "src": "2572:2:29"
                            },
                            "nativeSrc": "2572:38:29",
                            "nodeType": "YulFunctionCall",
                            "src": "2572:38:29"
                          },
                          "nativeSrc": "2569:161:29",
                          "nodeType": "YulIf",
                          "src": "2569:161:29"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nativeSrc": "2356:380:29",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nativeSrc": "2391:4:29",
                        "nodeType": "YulTypedName",
                        "src": "2391:4:29",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nativeSrc": "2400:6:29",
                        "nodeType": "YulTypedName",
                        "src": "2400:6:29",
                        "type": ""
                      }
                    ],
                    "src": "2356:380:29"
                  },
                  {
                    "body": {
                      "nativeSrc": "2898:188:29",
                      "nodeType": "YulBlock",
                      "src": "2898:188:29",
                      "statements": [
                        {
                          "nativeSrc": "2908:26:29",
                          "nodeType": "YulAssignment",
                          "src": "2908:26:29",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "2920:9:29",
                                "nodeType": "YulIdentifier",
                                "src": "2920:9:29"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2931:2:29",
                                "nodeType": "YulLiteral",
                                "src": "2931:2:29",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "2916:3:29",
                              "nodeType": "YulIdentifier",
                              "src": "2916:3:29"
                            },
                            "nativeSrc": "2916:18:29",
                            "nodeType": "YulFunctionCall",
                            "src": "2916:18:29"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "2908:4:29",
                              "nodeType": "YulIdentifier",
                              "src": "2908:4:29"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "2950:9:29",
                                "nodeType": "YulIdentifier",
                                "src": "2950:9:29"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "2965:6:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "2965:6:29"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nativeSrc": "2981:3:29",
                                            "nodeType": "YulLiteral",
                                            "src": "2981:3:29",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "2986:1:29",
                                            "nodeType": "YulLiteral",
                                            "src": "2986:1:29",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nativeSrc": "2977:3:29",
                                          "nodeType": "YulIdentifier",
                                          "src": "2977:3:29"
                                        },
                                        "nativeSrc": "2977:11:29",
                                        "nodeType": "YulFunctionCall",
                                        "src": "2977:11:29"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "2990:1:29",
                                        "nodeType": "YulLiteral",
                                        "src": "2990:1:29",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "2973:3:29",
                                      "nodeType": "YulIdentifier",
                                      "src": "2973:3:29"
                                    },
                                    "nativeSrc": "2973:19:29",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2973:19:29"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "2961:3:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "2961:3:29"
                                },
                                "nativeSrc": "2961:32:29",
                                "nodeType": "YulFunctionCall",
                                "src": "2961:32:29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "2943:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "2943:6:29"
                            },
                            "nativeSrc": "2943:51:29",
                            "nodeType": "YulFunctionCall",
                            "src": "2943:51:29"
                          },
                          "nativeSrc": "2943:51:29",
                          "nodeType": "YulExpressionStatement",
                          "src": "2943:51:29"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "3014:9:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "3014:9:29"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3025:2:29",
                                    "nodeType": "YulLiteral",
                                    "src": "3025:2:29",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "3010:3:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "3010:3:29"
                                },
                                "nativeSrc": "3010:18:29",
                                "nodeType": "YulFunctionCall",
                                "src": "3010:18:29"
                              },
                              {
                                "name": "value1",
                                "nativeSrc": "3030:6:29",
                                "nodeType": "YulIdentifier",
                                "src": "3030:6:29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "3003:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "3003:6:29"
                            },
                            "nativeSrc": "3003:34:29",
                            "nodeType": "YulFunctionCall",
                            "src": "3003:34:29"
                          },
                          "nativeSrc": "3003:34:29",
                          "nodeType": "YulExpressionStatement",
                          "src": "3003:34:29"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "3057:9:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "3057:9:29"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3068:2:29",
                                    "nodeType": "YulLiteral",
                                    "src": "3068:2:29",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "3053:3:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "3053:3:29"
                                },
                                "nativeSrc": "3053:18:29",
                                "nodeType": "YulFunctionCall",
                                "src": "3053:18:29"
                              },
                              {
                                "name": "value2",
                                "nativeSrc": "3073:6:29",
                                "nodeType": "YulIdentifier",
                                "src": "3073:6:29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "3046:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "3046:6:29"
                            },
                            "nativeSrc": "3046:34:29",
                            "nodeType": "YulFunctionCall",
                            "src": "3046:34:29"
                          },
                          "nativeSrc": "3046:34:29",
                          "nodeType": "YulExpressionStatement",
                          "src": "3046:34:29"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
                    "nativeSrc": "2741:345:29",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "2851:9:29",
                        "nodeType": "YulTypedName",
                        "src": "2851:9:29",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nativeSrc": "2862:6:29",
                        "nodeType": "YulTypedName",
                        "src": "2862:6:29",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "2870:6:29",
                        "nodeType": "YulTypedName",
                        "src": "2870:6:29",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "2878:6:29",
                        "nodeType": "YulTypedName",
                        "src": "2878:6:29",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "2889:4:29",
                        "nodeType": "YulTypedName",
                        "src": "2889:4:29",
                        "type": ""
                      }
                    ],
                    "src": "2741:345:29"
                  },
                  {
                    "body": {
                      "nativeSrc": "3192:102:29",
                      "nodeType": "YulBlock",
                      "src": "3192:102:29",
                      "statements": [
                        {
                          "nativeSrc": "3202:26:29",
                          "nodeType": "YulAssignment",
                          "src": "3202:26:29",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "3214:9:29",
                                "nodeType": "YulIdentifier",
                                "src": "3214:9:29"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3225:2:29",
                                "nodeType": "YulLiteral",
                                "src": "3225:2:29",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "3210:3:29",
                              "nodeType": "YulIdentifier",
                              "src": "3210:3:29"
                            },
                            "nativeSrc": "3210:18:29",
                            "nodeType": "YulFunctionCall",
                            "src": "3210:18:29"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "3202:4:29",
                              "nodeType": "YulIdentifier",
                              "src": "3202:4:29"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "3244:9:29",
                                "nodeType": "YulIdentifier",
                                "src": "3244:9:29"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "3259:6:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "3259:6:29"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nativeSrc": "3275:3:29",
                                            "nodeType": "YulLiteral",
                                            "src": "3275:3:29",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "3280:1:29",
                                            "nodeType": "YulLiteral",
                                            "src": "3280:1:29",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nativeSrc": "3271:3:29",
                                          "nodeType": "YulIdentifier",
                                          "src": "3271:3:29"
                                        },
                                        "nativeSrc": "3271:11:29",
                                        "nodeType": "YulFunctionCall",
                                        "src": "3271:11:29"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "3284:1:29",
                                        "nodeType": "YulLiteral",
                                        "src": "3284:1:29",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "3267:3:29",
                                      "nodeType": "YulIdentifier",
                                      "src": "3267:3:29"
                                    },
                                    "nativeSrc": "3267:19:29",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3267:19:29"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "3255:3:29",
                                  "nodeType": "YulIdentifier",
                                  "src": "3255:3:29"
                                },
                                "nativeSrc": "3255:32:29",
                                "nodeType": "YulFunctionCall",
                                "src": "3255:32:29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "3237:6:29",
                              "nodeType": "YulIdentifier",
                              "src": "3237:6:29"
                            },
                            "nativeSrc": "3237:51:29",
                            "nodeType": "YulFunctionCall",
                            "src": "3237:51:29"
                          },
                          "nativeSrc": "3237:51:29",
                          "nodeType": "YulExpressionStatement",
                          "src": "3237:51:29"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nativeSrc": "3091:203:29",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "3161:9:29",
                        "nodeType": "YulTypedName",
                        "src": "3161:9:29",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "3172:6:29",
                        "nodeType": "YulTypedName",
                        "src": "3172:6:29",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "3183:4:29",
                        "nodeType": "YulTypedName",
                        "src": "3183:4:29",
                        "type": ""
                      }
                    ],
                    "src": "3091:203:29"
                  },
                  {
                    "body": {
                      "nativeSrc": "3347:174:29",
                      "nodeType": "YulBlock",
                      "src": "3347:174:29",
                      "statements": [
                        {
                          "nativeSrc": "3357:16:29",
                          "nodeType": "YulAssignment",
                          "src": "3357:16:29",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nativeSrc": "3368:1:29",
                                "nodeType": "YulIdentifier",
                                "src": "3368:1:29"
                              },
                              {
                                "name": "y",
                                "nativeSrc": "3371:1:29",
                                "nodeType": "YulIdentifier",
                                "src": "3371:1:29"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "3364:3:29",
                              "nodeType": "YulIdentifier",
                              "src": "3364:3:29"
                            },
                            "nativeSrc": "3364:9:29",
                            "nodeType": "YulFunctionCall",
                            "src": "3364:9:29"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nativeSrc": "3357:3:29",
                              "nodeType": "YulIdentifier",
                              "src": "3357:3:29"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "3404:111:29",
                            "nodeType": "YulBlock",
                            "src": "3404:111:29",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "3425:1:29",
                                      "nodeType": "YulLiteral",
                                      "src": "3425:1:29",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "3432:3:29",
                                          "nodeType": "YulLiteral",
                                          "src": "3432:3:29",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "3437:10:29",
                                          "nodeType": "YulLiteral",
                                          "src": "3437:10:29",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nativeSrc": "3428:3:29",
                                        "nodeType": "YulIdentifier",
                                        "src": "3428:3:29"
                                      },
                                      "nativeSrc": "3428:20:29",
                                      "nodeType": "YulFunctionCall",
                                      "src": "3428:20:29"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "3418:6:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "3418:6:29"
                                  },
                                  "nativeSrc": "3418:31:29",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3418:31:29"
                                },
                                "nativeSrc": "3418:31:29",
                                "nodeType": "YulExpressionStatement",
                                "src": "3418:31:29"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "3469:1:29",
                                      "nodeType": "YulLiteral",
                                      "src": "3469:1:29",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "3472:4:29",
                                      "nodeType": "YulLiteral",
                                      "src": "3472:4:29",
                                      "type": "",
                                      "value": "0x11"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "3462:6:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "3462:6:29"
                                  },
                                  "nativeSrc": "3462:15:29",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3462:15:29"
                                },
                                "nativeSrc": "3462:15:29",
                                "nodeType": "YulExpressionStatement",
                                "src": "3462:15:29"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "3497:1:29",
                                      "nodeType": "YulLiteral",
                                      "src": "3497:1:29",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "3500:4:29",
                                      "nodeType": "YulLiteral",
                                      "src": "3500:4:29",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "3490:6:29",
                                    "nodeType": "YulIdentifier",
                                    "src": "3490:6:29"
                                  },
                                  "nativeSrc": "3490:15:29",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3490:15:29"
                                },
                                "nativeSrc": "3490:15:29",
                                "nodeType": "YulExpressionStatement",
                                "src": "3490:15:29"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nativeSrc": "3388:1:29",
                                "nodeType": "YulIdentifier",
                                "src": "3388:1:29"
                              },
                              {
                                "name": "sum",
                                "nativeSrc": "3391:3:29",
                                "nodeType": "YulIdentifier",
                                "src": "3391:3:29"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "3385:2:29",
                              "nodeType": "YulIdentifier",
                              "src": "3385:2:29"
                            },
                            "nativeSrc": "3385:10:29",
                            "nodeType": "YulFunctionCall",
                            "src": "3385:10:29"
                          },
                          "nativeSrc": "3382:133:29",
                          "nodeType": "YulIf",
                          "src": "3382:133:29"
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nativeSrc": "3299:222:29",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nativeSrc": "3330:1:29",
                        "nodeType": "YulTypedName",
                        "src": "3330:1:29",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nativeSrc": "3333:1:29",
                        "nodeType": "YulTypedName",
                        "src": "3333:1:29",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nativeSrc": "3339:3:29",
                        "nodeType": "YulTypedName",
                        "src": "3339:3:29",
                        "type": ""
                      }
                    ],
                    "src": "3299:222:29"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}",
              "id": 29,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce567146100fe57806370a082311461010d57806395d89b4114610136578063a9059cbb1461013e578063dd62ed3e1461015157600080fd5b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100d957806323b872dd146100eb575b600080fd5b6100a061018a565b6040516100ad919061056b565b60405180910390f35b6100c96100c43660046105d6565b61021c565b60405190151581526020016100ad565b6002545b6040519081526020016100ad565b6100c96100f9366004610600565b610236565b604051601281526020016100ad565b6100dd61011b36600461063c565b6001600160a01b031660009081526020819052604090205490565b6100a061025a565b6100c961014c3660046105d6565b610269565b6100dd61015f36600461065e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461019990610691565b80601f01602080910402602001604051908101604052809291908181526020018280546101c590610691565b80156102125780601f106101e757610100808354040283529160200191610212565b820191906000526020600020905b8154815290600101906020018083116101f557829003601f168201915b5050505050905090565b60003361022a818585610277565b60019150505b92915050565b600033610244858285610289565b61024f85858561030d565b506001949350505050565b60606004805461019990610691565b60003361022a81858561030d565b610284838383600161036c565b505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981101561030757818110156102f857604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064015b60405180910390fd5b6103078484848403600061036c565b50505050565b6001600160a01b03831661033757604051634b637e8f60e11b8152600060048201526024016102ef565b6001600160a01b0382166103615760405163ec442f0560e01b8152600060048201526024016102ef565b610284838383610441565b6001600160a01b0384166103965760405163e602df0560e01b8152600060048201526024016102ef565b6001600160a01b0383166103c057604051634a1406b160e11b8152600060048201526024016102ef565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561030757826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161043391815260200190565b60405180910390a350505050565b6001600160a01b03831661046c57806002600082825461046191906106cb565b909155506104de9050565b6001600160a01b038316600090815260208190526040902054818110156104bf5760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016102ef565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166104fa57600280548290039055610519565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161055e91815260200190565b60405180910390a3505050565b60006020808352835180602085015260005b818110156105995785810183015185820160400152820161057d565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146105d157600080fd5b919050565b600080604083850312156105e957600080fd5b6105f2836105ba565b946020939093013593505050565b60008060006060848603121561061557600080fd5b61061e846105ba565b925061062c602085016105ba565b9150604084013590509250925092565b60006020828403121561064e57600080fd5b610657826105ba565b9392505050565b6000806040838503121561067157600080fd5b61067a836105ba565b9150610688602084016105ba565b90509250929050565b600181811c908216806106a557607f821691505b6020821081036106c557634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561023057634e487b7160e01b600052601160045260246000fdfea2646970667358221220abaea69e6459a3891e181d751a5abda5c74857fbc793013aa45564dfbda9b89064736f6c63430008160033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x93 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x313CE567 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0xFE JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x13E JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x151 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x98 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xB6 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xD9 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xEB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA0 PUSH2 0x18A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAD SWAP2 SWAP1 PUSH2 0x56B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC9 PUSH2 0xC4 CALLDATASIZE PUSH1 0x4 PUSH2 0x5D6 JUMP JUMPDEST PUSH2 0x21C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAD JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAD JUMP JUMPDEST PUSH2 0xC9 PUSH2 0xF9 CALLDATASIZE PUSH1 0x4 PUSH2 0x600 JUMP JUMPDEST PUSH2 0x236 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAD JUMP JUMPDEST PUSH2 0xDD PUSH2 0x11B CALLDATASIZE PUSH1 0x4 PUSH2 0x63C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x25A JUMP JUMPDEST PUSH2 0xC9 PUSH2 0x14C CALLDATASIZE PUSH1 0x4 PUSH2 0x5D6 JUMP JUMPDEST PUSH2 0x269 JUMP JUMPDEST PUSH2 0xDD PUSH2 0x15F CALLDATASIZE PUSH1 0x4 PUSH2 0x65E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x199 SWAP1 PUSH2 0x691 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1C5 SWAP1 PUSH2 0x691 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x212 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1E7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x212 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1F5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x22A DUP2 DUP6 DUP6 PUSH2 0x277 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x244 DUP6 DUP3 DUP6 PUSH2 0x289 JUMP JUMPDEST PUSH2 0x24F DUP6 DUP6 DUP6 PUSH2 0x30D JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x199 SWAP1 PUSH2 0x691 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x22A DUP2 DUP6 DUP6 PUSH2 0x30D JUMP JUMPDEST PUSH2 0x284 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x36C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 LT ISZERO PUSH2 0x307 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x2F8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x307 DUP5 DUP5 DUP5 DUP5 SUB PUSH1 0x0 PUSH2 0x36C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x337 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x2EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x361 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x2EF JUMP JUMPDEST PUSH2 0x284 DUP4 DUP4 DUP4 PUSH2 0x441 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x396 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x2EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3C0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x2EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0x307 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x433 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x46C JUMPI DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x461 SWAP2 SWAP1 PUSH2 0x6CB JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x4DE SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x4BF JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x2EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x4FA JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0x519 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x55E SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x599 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x57D JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x5D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5F2 DUP4 PUSH2 0x5BA JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x615 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x61E DUP5 PUSH2 0x5BA JUMP JUMPDEST SWAP3 POP PUSH2 0x62C PUSH1 0x20 DUP6 ADD PUSH2 0x5BA JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x64E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x657 DUP3 PUSH2 0x5BA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x671 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x67A DUP4 PUSH2 0x5BA JUMP JUMPDEST SWAP2 POP PUSH2 0x688 PUSH1 0x20 DUP5 ADD PUSH2 0x5BA JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x6A5 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x6C5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x230 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAB 0xAE 0xA6 SWAP15 PUSH5 0x59A3891E18 SAR PUSH22 0x1A5ABDA5C74857FBC793013AA45564DFBDA9B8906473 PUSH16 0x6C634300081600330000000000000000 ",
          "sourceMap": "115:255:28:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1760:89:15;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3902:186;;;;;;:::i;:::-;;:::i;:::-;;;1169:14:29;;1162:22;1144:41;;1132:2;1117:18;3902:186:15;1004:187:29;2803:97:15;2881:12;;2803:97;;;1342:25:29;;;1330:2;1315:18;2803:97:15;1196:177:29;4680:244:15;;;;;;:::i;:::-;;:::i;2688:82::-;;;2761:2;1853:36:29;;1841:2;1826:18;2688:82:15;1711:184:29;2933:116:15;;;;;;:::i;:::-;-1:-1:-1;;;;;3024:18:15;2998:7;3024:18;;;;;;;;;;;;2933:116;1962:93;;;:::i;3244:178::-;;;;;;:::i;:::-;;:::i;3455:140::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3561:18:15;;;3535:7;3561:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3455:140;1760:89;1805:13;1837:5;1830:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1760:89;:::o;3902:186::-;3975:4;735:10:20;4029:31:15;735:10:20;4045:7:15;4054:5;4029:8;:31::i;:::-;4077:4;4070:11;;;3902:186;;;;;:::o;4680:244::-;4767:4;735:10:20;4823:37:15;4839:4;735:10:20;4854:5:15;4823:15;:37::i;:::-;4870:26;4880:4;4886:2;4890:5;4870:9;:26::i;:::-;-1:-1:-1;4913:4:15;;4680:244;-1:-1:-1;;;;4680:244:15:o;1962:93::-;2009:13;2041:7;2034:14;;;;;:::i;3244:178::-;3313:4;735:10:20;3367:27:15;735:10:20;3384:2:15;3388:5;3367:9;:27::i;8630:128::-;8714:37;8723:5;8730:7;8739:5;8746:4;8714:8;:37::i;:::-;8630:128;;;:::o;10319:476::-;-1:-1:-1;;;;;3561:18:15;;;10418:24;3561:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;-1:-1:-1;;10484:36:15;;10480:309;;;10559:5;10540:16;:24;10536:130;;;10591:60;;-1:-1:-1;;;10591:60:15;;-1:-1:-1;;;;;2961:32:29;;10591:60:15;;;2943:51:29;3010:18;;;3003:34;;;3053:18;;;3046:34;;;2916:18;;10591:60:15;;;;;;;;10536:130;10707:57;10716:5;10723:7;10751:5;10732:16;:24;10758:5;10707:8;:57::i;:::-;10408:387;10319:476;;;:::o;5297:300::-;-1:-1:-1;;;;;5380:18:15;;5376:86;;5421:30;;-1:-1:-1;;;5421:30:15;;5448:1;5421:30;;;3237:51:29;3210:18;;5421:30:15;3091:203:29;5376:86:15;-1:-1:-1;;;;;5475:16:15;;5471:86;;5514:32;;-1:-1:-1;;;5514:32:15;;5543:1;5514:32;;;3237:51:29;3210:18;;5514:32:15;3091:203:29;5471:86:15;5566:24;5574:4;5580:2;5584:5;5566:7;:24::i;9605:432::-;-1:-1:-1;;;;;9717:19:15;;9713:89;;9759:32;;-1:-1:-1;;;9759:32:15;;9788:1;9759:32;;;3237:51:29;3210:18;;9759:32:15;3091:203:29;9713:89:15;-1:-1:-1;;;;;9815:21:15;;9811:90;;9859:31;;-1:-1:-1;;;9859:31:15;;9887:1;9859:31;;;3237:51:29;3210:18;;9859:31:15;3091:203:29;9811:90:15;-1:-1:-1;;;;;9910:18:15;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;:35;;;9955:76;;;;10005:7;-1:-1:-1;;;;;9989:31:15;9998:5;-1:-1:-1;;;;;9989:31:15;;10014:5;9989:31;;;;1342:25:29;;1330:2;1315:18;;1196:177;9989:31:15;;;;;;;;9605:432;;;;:::o;5912:1107::-;-1:-1:-1;;;;;6001:18:15;;5997:540;;6153:5;6137:12;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;5997:540:15;;-1:-1:-1;5997:540:15;;-1:-1:-1;;;;;6211:15:15;;6189:19;6211:15;;;;;;;;;;;6244:19;;;6240:115;;;6290:50;;-1:-1:-1;;;6290:50:15;;-1:-1:-1;;;;;2961:32:29;;6290:50:15;;;2943:51:29;3010:18;;;3003:34;;;3053:18;;;3046:34;;;2916:18;;6290:50:15;2741:345:29;6240:115:15;-1:-1:-1;;;;;6475:15:15;;:9;:15;;;;;;;;;;6493:19;;;;6475:37;;5997:540;-1:-1:-1;;;;;6551:16:15;;6547:425;;6714:12;:21;;;;;;;6547:425;;;-1:-1:-1;;;;;6925:13:15;;:9;:13;;;;;;;;;;:22;;;;;;6547:425;7002:2;-1:-1:-1;;;;;6987:25:15;6996:4;-1:-1:-1;;;;;6987:25:15;;7006:5;6987:25;;;;1342::29;;1330:2;1315:18;;1196:177;6987:25:15;;;;;;;;5912:1107;;;:::o;14:548:29:-;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;298:3;483:1;478:2;469:6;458:9;454:22;450:31;443:42;553:2;546;542:7;537:2;529:6;525:15;521:29;510:9;506:45;502:54;494:62;;;;14:548;;;;:::o;567:173::-;635:20;;-1:-1:-1;;;;;684:31:29;;674:42;;664:70;;730:1;727;720:12;664:70;567:173;;;:::o;745:254::-;813:6;821;874:2;862:9;853:7;849:23;845:32;842:52;;;890:1;887;880:12;842:52;913:29;932:9;913:29;:::i;:::-;903:39;989:2;974:18;;;;961:32;;-1:-1:-1;;;745:254:29:o;1378:328::-;1455:6;1463;1471;1524:2;1512:9;1503:7;1499:23;1495:32;1492:52;;;1540:1;1537;1530:12;1492:52;1563:29;1582:9;1563:29;:::i;:::-;1553:39;;1611:38;1645:2;1634:9;1630:18;1611:38;:::i;:::-;1601:48;;1696:2;1685:9;1681:18;1668:32;1658:42;;1378:328;;;;;:::o;1900:186::-;1959:6;2012:2;2000:9;1991:7;1987:23;1983:32;1980:52;;;2028:1;2025;2018:12;1980:52;2051:29;2070:9;2051:29;:::i;:::-;2041:39;1900:186;-1:-1:-1;;;1900:186:29:o;2091:260::-;2159:6;2167;2220:2;2208:9;2199:7;2195:23;2191:32;2188:52;;;2236:1;2233;2226:12;2188:52;2259:29;2278:9;2259:29;:::i;:::-;2249:39;;2307:38;2341:2;2330:9;2326:18;2307:38;:::i;:::-;2297:48;;2091:260;;;;;:::o;2356:380::-;2435:1;2431:12;;;;2478;;;2499:61;;2553:4;2545:6;2541:17;2531:27;;2499:61;2606:2;2598:6;2595:14;2575:18;2572:38;2569:161;;2652:10;2647:3;2643:20;2640:1;2633:31;2687:4;2684:1;2677:15;2715:4;2712:1;2705:15;2569:161;;2356:380;;;:::o;3299:222::-;3364:9;;;3385:10;;;3382:133;;;3437:10;3432:3;3428:20;3425:1;3418:31;3472:4;3469:1;3462:15;3500:4;3497:1;3490:15"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "365200",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "allowance(address,address)": "infinite",
            "approve(address,uint256)": "24739",
            "balanceOf(address)": "2562",
            "decimals()": "177",
            "name()": "infinite",
            "symbol()": "infinite",
            "totalSupply()": "2326",
            "transfer(address,uint256)": "51288",
            "transferFrom(address,address,uint256)": "infinite"
          }
        },
        "methodIdentifiers": {
          "allowance(address,address)": "dd62ed3e",
          "approve(address,uint256)": "095ea7b3",
          "balanceOf(address)": "70a08231",
          "decimals()": "313ce567",
          "name()": "06fdde03",
          "symbol()": "95d89b41",
          "totalSupply()": "18160ddd",
          "transfer(address,uint256)": "a9059cbb",
          "transferFrom(address,address,uint256)": "23b872dd"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakeTokenERC20.sol\":\"StakeTokenERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x19fdfb0f3b89a230e7dbd1cf416f1a6b531a3ee5db4da483f946320fc74afc0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * Both values are immutable: they can only be set once during construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x86b7b71a6aedefdad89b607378eeab1dcc5389b9ea7d17346d08af01d7190994\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd6fa4088198f04eef10c5bce8a2f4d60554b7ec4b987f684393c01bf79b94d9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/StakeTokenERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract StakeTokenERC20 is ERC20{\\n    constructor() ERC20(\\\"MetaStakeToken\\\", \\\"MST\\\"){\\n        // \\u521d\\u59cb\\u4f9b\\u5e94\\u91cf\\u53ef\\u4ee5\\u5728\\u8fd9\\u91cc\\u5b9a\\u4e49\\uff0c\\u6216\\u8005\\u7559\\u7a7a\\u4ee5\\u4fbf\\u4e4b\\u540e\\u901a\\u8fc7 mint \\u51fd\\u6570\\u94f8\\u9020\\n         _mint(msg.sender, 10000000*1_000_000_000_000_000_000);\\n    }\\n}\",\"keccak256\":\"0xd37ef96c1d08957399d2de7f0dffe29e8ace98f1cb141cf40ff49b35edc0b8b6\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 1728,
            "contract": "contracts/StakeTokenERC20.sol:StakeTokenERC20",
            "label": "_balances",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 1734,
            "contract": "contracts/StakeTokenERC20.sol:StakeTokenERC20",
            "label": "_allowances",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
          },
          {
            "astId": 1736,
            "contract": "contracts/StakeTokenERC20.sol:StakeTokenERC20",
            "label": "_totalSupply",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1738,
            "contract": "contracts/StakeTokenERC20.sol:StakeTokenERC20",
            "label": "_name",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1740,
            "contract": "contracts/StakeTokenERC20.sol:StakeTokenERC20",
            "label": "_symbol",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_address,t_uint256)"
          },
          "t_mapping(t_address,t_uint256)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\\n     *\\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\\n     */\\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\\n        return INITIALIZABLE_STORAGE;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        bytes32 slot = _initializableStorageSlot();\\n        assembly {\\n            $.slot := slot\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC-1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    function __Pausable_init() internal onlyInitializing {\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\\n\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC1363.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC1967.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1967.sol)\\n\\npragma solidity >=0.4.11;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.21;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {IERC1967} from \\\"../../interfaces/IERC1967.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This library provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit IERC1967.Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit IERC1967.BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * Both values are immutable: they can only be set once during construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                revert(add(returndata, 0x20), mload(returndata))\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Errors.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2²⁵⁶ + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2²⁵⁶ + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2²⁵⁶ + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2²⁵⁶ - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2²⁵⁶ - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such\\n            // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv ≡ 1 mod 2⁴.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁸\\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶\\n            inverse *= 2 - denominator * inverse; // inverse mod 2³²\\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴\\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸\\n            inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is\\n            // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax ≡ 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `ε_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).\\n            // This is going to be our x_0 (and ε_0)\\n            xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a\\n            //              = ((x_n² + a) / (2 * x_n))² - a\\n            //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a\\n            //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)\\n            //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)\\n            //              = (x_n² - a)² / (2 * x_n)²\\n            //              = ((x_n² - a) / (2 * x_n))²\\n            //              ≥ 0\\n            // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // ε_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))² / (2 * x_n) |\\n            //         = | ε_n² / (2 * x_n) |\\n            //         = ε_n² / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // ε_1 = ε_0² / | (2 * x_0) |\\n            //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))\\n            //     ≤ 2**(2*e-4) / (3 * 2**(e-1))\\n            //     ≤ 2**(e-3) / 3\\n            //     ≤ 2**(e-3-log2(3))\\n            //     ≤ 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:\\n            // ε_{n+1} = ε_n² / | (2 * x_n) |\\n            //         ≤ (2**(e-k))² / (2 * 2**(e-1))\\n            //         ≤ 2**(2*e-2*k) / 2**e\\n            //         ≤ 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72\\n\\n            // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Panic.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/MetaNodeStake.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\n\\ncontract MetaNodeStake is\\n    Initializable,\\n    UUPSUpgradeable,\\n    PausableUpgradeable,\\n    AccessControlUpgradeable\\n{\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using Math for uint256;\\n\\n    // ************************************** INVARIANT **************************************\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"admin_role\\\");\\n    bytes32 public constant UPGRADE_ROLE = keccak256(\\\"upgrade_role\\\");\\n\\n    uint256 public constant ETH_PID = 0;\\n    \\n    // ************************************** DATA STRUCTURE **************************************\\n    /*\\n    Basically, any point in time, the amount of MetaNodes entitled to a user but is pending to be distributed is:\\n\\n    pending MetaNode = (user.stAmount * pool.accMetaNodePerST) - user.finishedMetaNode\\n\\n    Whenever a user deposits or withdraws staking tokens to a pool. Here's what happens:\\n    1. The pool's `accMetaNodePerST` (and `lastRewardBlock`) gets updated.\\n    2. User receives the pending MetaNode sent to his/her address.\\n    3. User's `stAmount` gets updated.\\n    4. User's `finishedMetaNode` gets updated.\\n    */\\n    struct Pool {\\n        // Address of staking token\\n        address stTokenAddress;\\n        // Weight of pool 质押池的权重，影响奖励分配。\\n        uint256 poolWeight;\\n        // Last block number that MetaNodes distribution occurs for pool\\n        uint256 lastRewardBlock;\\n        // Accumulated MetaNodes per staking token of pool 每个质押代币累积的 MetaNode 数量\\n        uint256 accMetaNodePerST;\\n        // Staking token amount 池中的总质押代币量\\n        uint256 stTokenAmount;\\n        // Min staking amount 最小质押量\\n        uint256 minDepositAmount;\\n        // Withdraw locked blocks : 解除质押的锁定区块数\\n        uint256 unstakeLockedBlocks;\\n    } \\n\\n    struct UnstakeRequest {\\n        // Request withdraw amount\\n        uint256 amount;\\n        // The blocks when the request withdraw amount can be released\\n        uint256 unlockBlocks;\\n    }\\n\\n    struct User {\\n        // Staking token amount that user provided 用户质押的代币数量。\\n        uint256 stAmount;\\n        // Finished distributed MetaNodes to user 已分配的 MetaNode 数量\\n        uint256 finishedMetaNode;\\n        // Pending to claim MetaNodes 待领取的MetaNode奖励\\n        uint256 pendingMetaNode;\\n        // Withdraw request list 解质押请求列表，每个请求包含解质押数量和解锁区块。\\n        UnstakeRequest[] requests;\\n    }\\n\\n    // ************************************** STATE VARIABLES **************************************\\n    // First block that MetaNodeStake will start from\\n    uint256 public startBlock;\\n    // First block that MetaNodeStake will end from\\n    uint256 public endBlock;\\n    // MetaNode token reward per block\\n    uint256 public MetaNodePerBlock;\\n\\n    // Pause the withdraw function\\n    bool public withdrawPaused;\\n    // Pause the claim function\\n    bool public claimPaused; \\n\\n    // MetaNode token\\n    IERC20 public MetaNode;\\n\\n    // Total pool weight / Sum of all pool weights\\n    uint256 public totalPoolWeight;\\n    Pool[] public pool;\\n\\n    // pool id => user address => user info\\n    mapping (uint256 => mapping (address => User)) public user;\\n\\n    // ************************************** EVENT **************************************\\n\\n    event SetMetaNode(IERC20 indexed MetaNode);\\n\\n    event PauseWithdraw();\\n\\n    event UnpauseWithdraw();\\n\\n    event PauseClaim();\\n\\n    event UnpauseClaim();\\n\\n    event SetStartBlock(uint256 indexed startBlock);\\n\\n    event SetEndBlock(uint256 indexed endBlock);\\n\\n    event SetMetaNodePerBlock(uint256 indexed MetaNodePerBlock);\\n\\n    event AddPool(address indexed stTokenAddress, uint256 indexed poolWeight, uint256 indexed lastRewardBlock, uint256 minDepositAmount, uint256 unstakeLockedBlocks);\\n\\n    event UpdatePoolInfo(uint256 indexed poolId, uint256 indexed minDepositAmount, uint256 indexed unstakeLockedBlocks);\\n\\n    event SetPoolWeight(uint256 indexed poolId, uint256 indexed poolWeight, uint256 totalPoolWeight);\\n\\n    event UpdatePool(uint256 indexed poolId, uint256 indexed lastRewardBlock, uint256 totalMetaNode);\\n\\n    event Deposit(address indexed user, uint256 indexed poolId, uint256 amount);\\n\\n    event RequestUnstake(address indexed user, uint256 indexed poolId, uint256 amount);\\n\\n    event Withdraw(address indexed user, uint256 indexed poolId, uint256 amount, uint256 indexed blockNumber);\\n\\n    event Claim(address indexed user, uint256 indexed poolId, uint256 MetaNodeReward);\\n\\n    // ************************************** MODIFIER **************************************\\n\\n    modifier checkPid(uint256 _pid) {\\n        require(_pid < pool.length, \\\"invalid pid\\\");\\n        _;\\n    }\\n\\n    modifier whenNotClaimPaused() {\\n        require(!claimPaused, \\\"claim is paused\\\");\\n        _;\\n    }\\n\\n    modifier whenNotWithdrawPaused() {\\n        require(!withdrawPaused, \\\"withdraw is paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Set MetaNode token address. Set basic info when deploying.\\n     */\\n    function initialize(\\n        IERC20 _MetaNode,\\n        uint256 _startBlock,\\n        uint256 _endBlock,\\n        uint256 _MetaNodePerBlock\\n    ) public initializer {\\n        require(_startBlock <= _endBlock && _MetaNodePerBlock > 0, \\\"invalid parameters\\\");\\n\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(UPGRADE_ROLE, msg.sender);\\n        _grantRole(ADMIN_ROLE, msg.sender);\\n\\n        setMetaNode(_MetaNode);\\n\\n        startBlock = _startBlock;\\n        endBlock = _endBlock;\\n        MetaNodePerBlock = _MetaNodePerBlock;\\n\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n        internal\\n        onlyRole(UPGRADE_ROLE)\\n        override\\n    {\\n\\n    }\\n\\n    // ************************************** ADMIN FUNCTION **************************************\\n\\n    /**\\n     * @notice Set MetaNode token address. Can only be called by admin\\n     */\\n    function setMetaNode(IERC20 _MetaNode) public onlyRole(ADMIN_ROLE) {\\n        MetaNode = _MetaNode;\\n\\n        emit SetMetaNode(MetaNode);\\n    }\\n\\n    /**\\n     * @notice Pause withdraw. Can only be called by admin.\\n     */\\n    function pauseWithdraw() public onlyRole(ADMIN_ROLE) {\\n        require(!withdrawPaused, \\\"withdraw has been already paused\\\");\\n\\n        withdrawPaused = true;\\n\\n        emit PauseWithdraw();\\n    }\\n\\n    /**\\n     * @notice Unpause withdraw. Can only be called by admin.\\n     */\\n    function unpauseWithdraw() public onlyRole(ADMIN_ROLE) {\\n        require(withdrawPaused, \\\"withdraw has been already unpaused\\\");\\n\\n        withdrawPaused = false;\\n\\n        emit UnpauseWithdraw();\\n    }\\n\\n    /**\\n     * @notice Pause claim. Can only be called by admin.\\n     */\\n    function pauseClaim() public onlyRole(ADMIN_ROLE) {\\n        require(!claimPaused, \\\"claim has been already paused\\\");\\n\\n        claimPaused = true;\\n\\n        emit PauseClaim();\\n    }\\n\\n    /**\\n     * @notice Unpause claim. Can only be called by admin.\\n     */\\n    function unpauseClaim() public onlyRole(ADMIN_ROLE) {\\n        require(claimPaused, \\\"claim has been already unpaused\\\");\\n\\n        claimPaused = false;\\n\\n        emit UnpauseClaim();\\n    }\\n\\n    /**\\n     * @notice Update staking start block. Can only be called by admin.\\n     */\\n    function setStartBlock(uint256 _startBlock) public onlyRole(ADMIN_ROLE) {\\n        require(_startBlock <= endBlock, \\\"start block must be smaller than end block\\\");\\n\\n        startBlock = _startBlock;\\n\\n        emit SetStartBlock(_startBlock);\\n    }\\n\\n    /**\\n     * @notice Update staking end block. Can only be called by admin.\\n     */\\n    function setEndBlock(uint256 _endBlock) public onlyRole(ADMIN_ROLE) {\\n        require(startBlock <= _endBlock, \\\"start block must be smaller than end block\\\");\\n\\n        endBlock = _endBlock;\\n\\n        emit SetEndBlock(_endBlock);\\n    }\\n\\n    /**\\n     * @notice Update the MetaNode reward amount per block. Can only be called by admin.\\n     */\\n    function setMetaNodePerBlock(uint256 _MetaNodePerBlock) public onlyRole(ADMIN_ROLE) {\\n        require(_MetaNodePerBlock > 0, \\\"invalid parameter\\\");\\n\\n        MetaNodePerBlock = _MetaNodePerBlock;\\n\\n        emit SetMetaNodePerBlock(_MetaNodePerBlock);\\n    }\\n\\n    /**\\n     * @notice Add a new staking to pool. Can only be called by admin\\n     * DO NOT add the same staking token more than once. MetaNode rewards will be messed up if you do\\n     */\\n    function addPool(address _stTokenAddress, uint256 _poolWeight, uint256 _minDepositAmount, uint256 _unstakeLockedBlocks,  bool _withUpdate) public onlyRole(ADMIN_ROLE) {\\n        // Default the first pool to be ETH pool, so the first pool must be added with stTokenAddress = address(0x0)\\n        if (pool.length > 0) {\\n            require(_stTokenAddress != address(0x0), \\\"invalid staking token address\\\");\\n        } else {\\n            require(_stTokenAddress == address(0x0), \\\"invalid staking token address\\\");\\n        }\\n        // allow the min deposit amount equal to 0\\n        //require(_minDepositAmount > 0, \\\"invalid min deposit amount\\\");\\n        require(_unstakeLockedBlocks > 0, \\\"invalid withdraw locked blocks\\\");\\n        require(block.number < endBlock, \\\"Already ended\\\");\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        } \\n\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\n        totalPoolWeight = totalPoolWeight + _poolWeight;\\n\\n        pool.push(Pool({\\n            stTokenAddress: _stTokenAddress,\\n            poolWeight: _poolWeight,\\n            lastRewardBlock: lastRewardBlock,\\n            accMetaNodePerST: 0,\\n            stTokenAmount: 0,\\n            minDepositAmount: _minDepositAmount,\\n            unstakeLockedBlocks: _unstakeLockedBlocks\\n        }));\\n\\n        emit AddPool(_stTokenAddress, _poolWeight, lastRewardBlock, _minDepositAmount, _unstakeLockedBlocks);\\n    }\\n\\n    /**\\n     * @notice Update the given pool's info (minDepositAmount and unstakeLockedBlocks). Can only be called by admin.\\n     */\\n    function updatePool(uint256 _pid, uint256 _minDepositAmount, uint256 _unstakeLockedBlocks) public onlyRole(ADMIN_ROLE) checkPid(_pid) {\\n        pool[_pid].minDepositAmount = _minDepositAmount;\\n        pool[_pid].unstakeLockedBlocks = _unstakeLockedBlocks;\\n\\n        emit UpdatePoolInfo(_pid, _minDepositAmount, _unstakeLockedBlocks);\\n    }\\n\\n    /**\\n     * @notice Update the given pool's weight. Can only be called by admin.\\n     */\\n    function setPoolWeight(uint256 _pid, uint256 _poolWeight, bool _withUpdate) public onlyRole(ADMIN_ROLE) checkPid(_pid) {\\n        require(_poolWeight > 0, \\\"invalid pool weight\\\");\\n        \\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        totalPoolWeight = totalPoolWeight - pool[_pid].poolWeight + _poolWeight;\\n        pool[_pid].poolWeight = _poolWeight;\\n\\n        emit SetPoolWeight(_pid, _poolWeight, totalPoolWeight);\\n    }\\n\\n    // ************************************** QUERY FUNCTION **************************************\\n\\n    /**\\n     * @notice Get the length/amount of pool\\n     */\\n    function poolLength() external view returns(uint256) {\\n        return pool.length;\\n    }\\n\\n    /**\\n     * @notice Return reward multiplier over given _from to _to block. [_from, _to)\\n     *\\n     * @param _from    From block number (included)\\n     * @param _to      To block number (exluded)\\n     */\\n    function getMultiplier(uint256 _from, uint256 _to) public view returns(uint256 multiplier) {\\n        require(_from <= _to, \\\"invalid block\\\");\\n        if (_from < startBlock) {_from = startBlock;}\\n        if (_to > endBlock) {_to = endBlock;}\\n        require(_from <= _to, \\\"end block must be greater than start block\\\");\\n        bool success;\\n        (success, multiplier) = (_to - _from).tryMul(MetaNodePerBlock);\\n        require(success, \\\"multiplier overflow\\\");\\n    }\\n\\n    /**\\n     * @notice Get pending MetaNode amount of user in pool\\n     */\\n    function pendingMetaNode(uint256 _pid, address _user) external checkPid(_pid) view returns(uint256) {\\n        return pendingMetaNodeByBlockNumber(_pid, _user, block.number);\\n    }\\n\\n    /**\\n     * @notice Get pending MetaNode amount of user by block number in pool\\n     */\\n    function pendingMetaNodeByBlockNumber(uint256 _pid, address _user, uint256 _blockNumber) public checkPid(_pid) view returns(uint256) {\\n        Pool storage pool_ = pool[_pid];\\n        User storage user_ = user[_pid][_user];\\n        uint256 accMetaNodePerST = pool_.accMetaNodePerST;\\n        uint256 stSupply = pool_.stTokenAmount;\\n\\n        if (_blockNumber > pool_.lastRewardBlock && stSupply != 0) {\\n            uint256 multiplier = getMultiplier(pool_.lastRewardBlock, _blockNumber);\\n            uint256 MetaNodeForPool = multiplier * pool_.poolWeight / totalPoolWeight;\\n            accMetaNodePerST = accMetaNodePerST + MetaNodeForPool * (1 ether) / stSupply; //更新每单位stToken的MetaNode奖励\\n        }\\n\\n        return user_.stAmount * accMetaNodePerST / (1 ether) - user_.finishedMetaNode + user_.pendingMetaNode;  \\n        //finishedMetaNode 用户已经领取的MetaNode奖励，pendingMetaNode 用户待领取的MetaNode奖励\\n        //除以1ether，因为stAmount 和 accMetaNodePerST都是以1*10^18为单位\\n    }\\n\\n    /**\\n     * @notice Get the staking amount of user\\n     */\\n    function stakingBalance(uint256 _pid, address _user) external checkPid(_pid) view returns(uint256) {\\n        return user[_pid][_user].stAmount;\\n    }\\n\\n    /**\\n     * @notice Get the withdraw amount info, including the locked unstake amount and the unlocked unstake amount\\n     */\\n    function withdrawAmount(uint256 _pid, address _user) public checkPid(_pid) view returns(uint256 requestAmount, uint256 pendingWithdrawAmount) {\\n        User storage user_ = user[_pid][_user];\\n\\n        for (uint256 i = 0; i < user_.requests.length; i++) {\\n            if (user_.requests[i].unlockBlocks <= block.number) {\\n                pendingWithdrawAmount = pendingWithdrawAmount + user_.requests[i].amount;\\n            }\\n            requestAmount = requestAmount + user_.requests[i].amount;\\n        }\\n    }\\n\\n    // ************************************** PUBLIC FUNCTION **************************************\\n\\n    /**\\n     * @notice Update reward variables of the given pool to be up-to-date.\\n     */\\n    function updatePool(uint256 _pid) public checkPid(_pid) {\\n        Pool storage pool_ = pool[_pid];\\n\\n        if (block.number <= pool_.lastRewardBlock) {\\n            return;\\n        }\\n\\n        (bool success1, uint256 totalMetaNode) = getMultiplier(pool_.lastRewardBlock, block.number).tryMul(pool_.poolWeight);\\n        require(success1, \\\"overflow\\\");\\n\\n        (success1, totalMetaNode) = totalMetaNode.tryDiv(totalPoolWeight);\\n        require(success1, \\\"overflow\\\");\\n\\n        uint256 stSupply = pool_.stTokenAmount;\\n        if (stSupply > 0) {\\n            (bool success2, uint256 totalMetaNode_) = totalMetaNode.tryMul(1 ether);\\n            require(success2, \\\"overflow\\\");\\n\\n            (success2, totalMetaNode_) = totalMetaNode_.tryDiv(stSupply);\\n            require(success2, \\\"overflow\\\");\\n\\n            (bool success3, uint256 accMetaNodePerST) = pool_.accMetaNodePerST.tryAdd(totalMetaNode_);\\n            require(success3, \\\"overflow\\\");\\n            pool_.accMetaNodePerST = accMetaNodePerST; //更新每单位stToken的MetaNode奖励\\n        }\\n\\n        pool_.lastRewardBlock = block.number;\\n\\n        emit UpdatePool(_pid, pool_.lastRewardBlock, totalMetaNode);\\n    }\\n\\n    /**\\n     * @notice Update reward variables for all pools. Be careful of gas spending!\\n     */\\n    function massUpdatePools() public {\\n        uint256 length = pool.length;\\n        for (uint256 pid = 0; pid < length; pid++) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    /**\\n     * @notice Deposit staking ETH for MetaNode rewards\\n     */\\n    function depositETH() public whenNotPaused() payable {\\n        Pool storage pool_ = pool[ETH_PID]; //nativeToken pool default pid is 0\\n        require(pool_.stTokenAddress == address(0x0), \\\"invalid staking token address\\\");\\n\\n        uint256 _amount = msg.value;\\n        require(_amount >= pool_.minDepositAmount, \\\"deposit amount is too small\\\");\\n\\n        _deposit(ETH_PID, _amount);\\n    }\\n\\n    /**\\n     * @notice Deposit staking token for MetaNode rewards\\n     * Before depositing, user needs approve this contract to be able to spend or transfer their staking tokens\\n     *\\n     * @param _pid       Id of the pool to be deposited to\\n     * @param _amount    Amount of staking tokens to be deposited\\n     */\\n    function deposit(uint256 _pid, uint256 _amount) public whenNotPaused() checkPid(_pid) {\\n        require(_pid != 0, \\\"deposit not support ETH staking\\\");\\n        Pool storage pool_ = pool[_pid];\\n        require(_amount > pool_.minDepositAmount, \\\"deposit amount is too small\\\");\\n\\n        if(_amount > 0) {\\n            IERC20(pool_.stTokenAddress).safeTransferFrom(msg.sender, address(this), _amount);\\n        }\\n\\n        _deposit(_pid, _amount);\\n    }\\n\\n    /**\\n     * @notice Unstake staking tokens\\n     *\\n     * @param _pid       Id of the pool to be withdrawn from\\n     * @param _amount    amount of staking tokens to be withdrawn\\n     */\\n    function unstake(uint256 _pid, uint256 _amount) public whenNotPaused() checkPid(_pid) whenNotWithdrawPaused() {\\n        Pool storage pool_ = pool[_pid];\\n        User storage user_ = user[_pid][msg.sender];\\n\\n        require(user_.stAmount >= _amount, \\\"Not enough staking token balance\\\");\\n\\n        updatePool(_pid);\\n\\n        uint256 pendingMetaNode_ = user_.stAmount * pool_.accMetaNodePerST / (1 ether) - user_.finishedMetaNode;\\n\\n        if(pendingMetaNode_ > 0) {\\n            user_.pendingMetaNode = user_.pendingMetaNode + pendingMetaNode_; //待领取的MetaNode奖励\\n        }\\n\\n        if(_amount > 0) {\\n            user_.stAmount = user_.stAmount - _amount;\\n            user_.requests.push(UnstakeRequest({\\n                amount: _amount,\\n                unlockBlocks: block.number + pool_.unstakeLockedBlocks\\n            }));\\n        }\\n\\n        pool_.stTokenAmount = pool_.stTokenAmount - _amount;\\n        user_.finishedMetaNode = user_.stAmount * pool_.accMetaNodePerST / (1 ether);\\n\\n        emit RequestUnstake(msg.sender, _pid, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw the unlock unstake amount\\n     *\\n     * @param _pid       Id of the pool to be withdrawn from\\n     */\\n    function withdraw(uint256 _pid) public whenNotPaused() checkPid(_pid) whenNotWithdrawPaused() {\\n        Pool storage pool_ = pool[_pid];\\n        User storage user_ = user[_pid][msg.sender];\\n\\n        uint256 pendingWithdraw_;\\n        uint256 popNum_;\\n        for (uint256 i = 0; i < user_.requests.length; i++) {\\n            if (user_.requests[i].unlockBlocks > block.number) {\\n                break;\\n            }\\n            pendingWithdraw_ = pendingWithdraw_ + user_.requests[i].amount;\\n            popNum_++;\\n        }\\n\\n        for (uint256 i = 0; i < user_.requests.length - popNum_; i++) {\\n            user_.requests[i] = user_.requests[i + popNum_];\\n        }\\n\\n        for (uint256 i = 0; i < popNum_; i++) {\\n            user_.requests.pop();\\n        }\\n\\n        if (pendingWithdraw_ > 0) {\\n            if (pool_.stTokenAddress == address(0x0)) {\\n                _safeETHTransfer(msg.sender, pendingWithdraw_);\\n            } else {\\n                IERC20(pool_.stTokenAddress).safeTransfer(msg.sender, pendingWithdraw_);\\n            }\\n        }\\n\\n        emit Withdraw(msg.sender, _pid, pendingWithdraw_, block.number);\\n    }\\n\\n    /**\\n     * @notice Claim MetaNode tokens reward\\n     *\\n     * @param _pid       Id of the pool to be claimed from\\n     */\\n    function claim(uint256 _pid) public whenNotPaused() checkPid(_pid) whenNotClaimPaused() {\\n        Pool storage pool_ = pool[_pid];\\n        User storage user_ = user[_pid][msg.sender];\\n\\n        updatePool(_pid);\\n\\n        uint256 pendingMetaNode_ = user_.stAmount * pool_.accMetaNodePerST / (1 ether) - user_.finishedMetaNode + user_.pendingMetaNode;\\n\\n        if(pendingMetaNode_ > 0) {\\n            user_.pendingMetaNode = 0;\\n            _safeMetaNodeTransfer(msg.sender, pendingMetaNode_);\\n        }\\n\\n        user_.finishedMetaNode = user_.stAmount * pool_.accMetaNodePerST / (1 ether);\\n\\n        emit Claim(msg.sender, _pid, pendingMetaNode_);\\n    }\\n\\n    // ************************************** INTERNAL FUNCTION **************************************\\n\\n    /**\\n     * @notice Deposit staking token for MetaNode rewards\\n     *\\n     * @param _pid       Id of the pool to be deposited to\\n     * @param _amount    Amount of staking tokens to be deposited\\n     */\\n    function _deposit(uint256 _pid, uint256 _amount) internal {\\n        Pool storage pool_ = pool[_pid];\\n        User storage user_ = user[_pid][msg.sender];\\n\\n        updatePool(_pid);\\n\\n        if (user_.stAmount > 0) {\\n            // uint256 accST = user_.stAmount.mulDiv(pool_.accMetaNodePerST, 1 ether);\\n            (bool success1, uint256 accST) = user_.stAmount.tryMul(pool_.accMetaNodePerST);\\n            require(success1, \\\"user stAmount mul accMetaNodePerST overflow\\\");\\n            (success1, accST) = accST.tryDiv(1 ether);\\n            require(success1, \\\"accST div 1 ether overflow\\\");\\n            \\n            (bool success2, uint256 pendingMetaNode_) = accST.trySub(user_.finishedMetaNode);\\n            require(success2, \\\"accST sub finishedMetaNode overflow\\\");\\n\\n            if(pendingMetaNode_ > 0) {\\n                (bool success3, uint256 _pendingMetaNode) = user_.pendingMetaNode.tryAdd(pendingMetaNode_);\\n                require(success3, \\\"user pendingMetaNode overflow\\\");\\n                user_.pendingMetaNode = _pendingMetaNode;\\n            }\\n        } \\n\\n        if(_amount > 0) {\\n            (bool success4, uint256 stAmount) = user_.stAmount.tryAdd(_amount);\\n            require(success4, \\\"user stAmount overflow\\\");\\n            user_.stAmount = stAmount;\\n        }\\n\\n        (bool success5, uint256 stTokenAmount) = pool_.stTokenAmount.tryAdd(_amount);\\n        require(success5, \\\"pool stTokenAmount overflow\\\");\\n        pool_.stTokenAmount = stTokenAmount;\\n\\n        // user_.finishedMetaNode = user_.stAmount.mulDiv(pool_.accMetaNodePerST, 1 ether);\\n        (bool success6, uint256 finishedMetaNode) = user_.stAmount.tryMul(pool_.accMetaNodePerST);\\n        require(success6, \\\"user stAmount mul accMetaNodePerST overflow\\\");\\n\\n        (success6, finishedMetaNode) = finishedMetaNode.tryDiv(1 ether);\\n        require(success6, \\\"finishedMetaNode div 1 ether overflow\\\");\\n\\n        user_.finishedMetaNode = finishedMetaNode;\\n\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    /**\\n     * @notice Safe MetaNode transfer function, just in case if rounding error causes pool to not have enough MetaNodes\\n     *\\n     * @param _to        Address to get transferred MetaNodes\\n     * @param _amount    Amount of MetaNode to be transferred\\n     */\\n    function _safeMetaNodeTransfer(address _to, uint256 _amount) internal {\\n        uint256 MetaNodeBal = MetaNode.balanceOf(address(this));\\n\\n        if (_amount > MetaNodeBal) {\\n            MetaNode.transfer(_to, MetaNodeBal);\\n        } else {\\n            MetaNode.transfer(_to, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe ETH transfer function\\n     *\\n     * @param _to        Address to get transferred ETH\\n     * @param _amount    Amount of ETH to be transferred\\n     */\\n    function _safeETHTransfer(address _to, uint256 _amount) internal {\\n        (bool success, bytes memory data) = address(_to).call{\\n            value: _amount\\n        }(\\\"\\\");\\n\\n        require(success, \\\"ETH transfer call failed\\\");\\n        if (data.length > 0) {\\n            require(\\n                abi.decode(data, (bool)),\\n                \\\"ETH transfer operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\"\n    },\n    \"contracts/StakeTokenERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract StakeTokenERC20 is ERC20{\\n    constructor() ERC20(\\\"MetaStakeToken\\\", \\\"MST\\\"){\\n        // 初始供应量可以在这里定义，或者留空以便之后通过 mint 函数铸造\\n         _mint(msg.sender, 10000000*1_000_000_000_000_000_000);\\n    }\\n}\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"evmVersion\": \"paris\",\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"storageLayout\",\n          \"devdoc\",\n          \"userdoc\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "c24959d9b82ead4a1b6bcf151764bc17",
      "transactionHash": "0xfce589350d2ecd1b6ff9bc9afd97962a5705218ceeb6df59309b4019feeecda2",
      "args": []
    },
    "decoded": {
      "from": "0x523df39cAe18ea125930DA730628213e4b147CDc",
      "gasPrice": "137928406",
      "maxFeePerGas": "137928406",
      "maxPriorityFeePerGas": "1000000",
      "gasLimit": "558751",
      "to": null,
      "value": "0",
      "nonce": 366,
      "data": "0x60806040523480156200001157600080fd5b506040518060400160405280600e81526020016d26b2ba30a9ba30b5b2aa37b5b2b760911b815250604051806040016040528060038152602001621354d560ea1b8152508160039081620000669190620002b7565b506004620000758282620002b7565b50505062000095336a084595161401484a0000006200009b60201b60201c565b620003ab565b6001600160a01b038216620000cb5760405163ec442f0560e01b8152600060048201526024015b60405180910390fd5b620000d960008383620000dd565b5050565b6001600160a01b0383166200010c57806002600082825462000100919062000383565b90915550620001809050565b6001600160a01b03831660009081526020819052604090205481811015620001615760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401620000c2565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166200019e57600280548290039055620001bd565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200020391815260200190565b60405180910390a3505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200023b57607f821691505b6020821081036200025c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002b2576000816000526020600020601f850160051c810160208610156200028d5750805b601f850160051c820191505b81811015620002ae5782815560010162000299565b5050505b505050565b81516001600160401b03811115620002d357620002d362000210565b620002eb81620002e4845462000226565b8462000262565b602080601f8311600181146200032357600084156200030a5750858301515b600019600386901b1c1916600185901b178555620002ae565b600085815260208120601f198616915b82811015620003545788860151825594840194600190910190840162000333565b5085821015620003735787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80820180821115620003a557634e487b7160e01b600052601160045260246000fd5b92915050565b61072280620003bb6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce567146100fe57806370a082311461010d57806395d89b4114610136578063a9059cbb1461013e578063dd62ed3e1461015157600080fd5b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100d957806323b872dd146100eb575b600080fd5b6100a061018a565b6040516100ad919061056b565b60405180910390f35b6100c96100c43660046105d6565b61021c565b60405190151581526020016100ad565b6002545b6040519081526020016100ad565b6100c96100f9366004610600565b610236565b604051601281526020016100ad565b6100dd61011b36600461063c565b6001600160a01b031660009081526020819052604090205490565b6100a061025a565b6100c961014c3660046105d6565b610269565b6100dd61015f36600461065e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461019990610691565b80601f01602080910402602001604051908101604052809291908181526020018280546101c590610691565b80156102125780601f106101e757610100808354040283529160200191610212565b820191906000526020600020905b8154815290600101906020018083116101f557829003601f168201915b5050505050905090565b60003361022a818585610277565b60019150505b92915050565b600033610244858285610289565b61024f85858561030d565b506001949350505050565b60606004805461019990610691565b60003361022a81858561030d565b610284838383600161036c565b505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981101561030757818110156102f857604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064015b60405180910390fd5b6103078484848403600061036c565b50505050565b6001600160a01b03831661033757604051634b637e8f60e11b8152600060048201526024016102ef565b6001600160a01b0382166103615760405163ec442f0560e01b8152600060048201526024016102ef565b610284838383610441565b6001600160a01b0384166103965760405163e602df0560e01b8152600060048201526024016102ef565b6001600160a01b0383166103c057604051634a1406b160e11b8152600060048201526024016102ef565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561030757826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161043391815260200190565b60405180910390a350505050565b6001600160a01b03831661046c57806002600082825461046191906106cb565b909155506104de9050565b6001600160a01b038316600090815260208190526040902054818110156104bf5760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016102ef565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166104fa57600280548290039055610519565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161055e91815260200190565b60405180910390a3505050565b60006020808352835180602085015260005b818110156105995785810183015185820160400152820161057d565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146105d157600080fd5b919050565b600080604083850312156105e957600080fd5b6105f2836105ba565b946020939093013593505050565b60008060006060848603121561061557600080fd5b61061e846105ba565b925061062c602085016105ba565b9150604084013590509250925092565b60006020828403121561064e57600080fd5b610657826105ba565b9392505050565b6000806040838503121561067157600080fd5b61067a836105ba565b9150610688602084016105ba565b90509250929050565b600181811c908216806106a557607f821691505b6020821081036106c557634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561023057634e487b7160e01b600052601160045260246000fdfea2646970667358221220abaea69e6459a3891e181d751a5abda5c74857fbc793013aa45564dfbda9b89064736f6c63430008160033",
      "r": "0x9973fe98bf859f21b65e8b4be51db416ef8d961fd4d0f537165e5536ae6178d2",
      "s": "0x78db84b8f1f17600f24e9f8b589f930135249a378c83339641cffb0ced96a557",
      "v": 1,
      "chainId": 11155111
    }
  }
}